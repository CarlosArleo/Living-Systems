{"traceId":"1d53cb41344bbd8765d87c993d7452d9","spans":{"75ac3b11434148b5":{"spanId":"75ac3b11434148b5","traceId":"1d53cb41344bbd8765d87c993d7452d9","parentSpanId":"bf176bcf42500580","startTime":1756741495443,"endTime":1756741495721.7485,"attributes":{"http.request.method":"POST","http.request.method_original":"POST","url.full":"https://generativelanguage.googleapis.com/v1beta/models/text-embedding-004:embedContent","url.path":"/v1beta/models/text-embedding-004:embedContent","url.query":"","url.scheme":"https","server.address":"generativelanguage.googleapis.com","server.port":443,"user_agent.original":"node","network.peer.address":"142.250.153.95","network.peer.port":443,"http.response.status_code":200},"displayName":"POST","links":[],"instrumentationLibrary":{"name":"@opentelemetry/instrumentation-undici","version":"0.5.0"},"spanKind":"CLIENT","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"bf176bcf42500580":{"spanId":"bf176bcf42500580","traceId":"1d53cb41344bbd8765d87c993d7452d9","parentSpanId":"5747a010eae754fe","startTime":1756741495441,"endTime":1756741495728.9924,"attributes":{"genkit:type":"action","genkit:metadata:subtype":"embedder","genkit:name":"googleai/text-embedding-004","genkit:path":"/{generateMasterPrompt,t:flow}/{googleai/text-embedding-004,t:action,s:embedder}","genkit:input":"{\"input\":[{\"content\":[{\"text\":\"Create a React component that fetches and displays user data.\"}]}],\"options\":{}}","genkit:output":"{\"embeddings\":[{\"embedding\":[0.002040473,0.014082354,-0.04943459,0.0060193576,0.059859913,0.08217273,0.00946099,0.013220095,-0.04130449,0.0105498545,-0.041440163,0.005600478,0.028806182,0.0032060225,-0.040995482,-0.00007961279,-0.04027227,-0.017196467,-0.048125904,-0.028876567,-0.016632978,-0.011446069,-0.052754164,0.050441943,0.014564269,0.0040702433,0.016357142,-0.003978828,0.033640016,0.04331693,-0.001247804,0.065412976,0.039897267,0.002007247,0.010434527,-0.0033405644,-0.023431484,-0.021770043,0.03443072,-0.006248511,-0.031762805,-0.015937958,-0.017667802,0.10346457,0.021034686,-0.012655696,-0.0022770732,0.04829506,0.0059095,0.021829017,0.063682415,0.006635304,-0.030393915,0.022833336,0.008804302,-0.0045493264,0.003368018,-0.028406892,0.0018560247,0.0061407723,-0.016717328,-0.011159687,0.020377818,-0.07729195,-0.010303443,-0.0015139322,-0.0102195535,0.011327775,-0.04605257,0.058446202,-0.025004283,-0.012575296,-0.05744183,-0.025224803,-0.020980248,-0.0020781045,-0.033821173,-0.011068578,-0.017279724,-0.04058357,-0.057553224,0.04202855,0.0010876543,0.006744491,-0.016689718,0.007521706,0.0019237755,0.004021193,0.022276137,-0.013645403,0.049887612,0.027290046,0.041340746,-0.018828992,0.038062025,-0.01127155,-0.111235924,-0.0066635334,0.035905693,-0.032331616,-0.002480278,0.0062362324,0.035828196,-0.031966094,-0.010800154,-0.018882731,0.013190098,-0.037961252,-0.051244482,0.010448362,0.02114439,0.01796261,0.07249156,-0.058936715,-0.022244021,0.04869139,0.021056946,0.0053335135,-0.0070859594,0.056302626,-0.0019056163,0.046315182,-0.026608152,0.076809496,0.07881895,-0.069914676,0.040051635,-0.016875768,-0.021743853,-0.03540755,0.072958104,0.0180483,0.028274542,0.026333263,-0.024161391,-0.029732058,0.043836396,-0.018309077,0.10370058,-0.011324933,-0.028618969,-0.040019568,-0.07254879,0.0032883186,-0.031319458,-0.020659316,0.01691929,0.07733515,0.042057462,-0.030568914,-0.040297143,0.06983144,0.034836378,0.01149123,-0.013308308,-0.017871026,0.022861127,-0.016639218,0.015067238,0.034293853,-0.09064178,-0.009247288,-0.012681437,-0.008736084,-0.050952103,-0.057246692,-0.011525156,0.025633464,0.022495229,0.0023250047,-0.04988533,-0.007098069,-0.091623545,-0.0026828628,-0.004341036,0.008764275,-0.06040391,-0.03940289,0.0112953205,-0.05666944,0.03402215,0.06975072,-0.012789148,-0.039076723,0.03366474,0.009666565,-0.031202557,0.057871833,0.047265552,0.046953388,-0.024059057,-0.010566876,0.0021887037,-0.0040041585,-0.058229145,-0.017151613,0.009971673,-0.046881743,-0.007730477,0.00785547,-0.008174201,-0.03295223,-0.0042595677,-0.07483086,0.015662227,-0.026875768,0.02198996,-0.0038526056,0.027986826,0.06487957,0.02077634,0.006662468,0.006597398,-0.10819144,-0.010738109,0.04014209,0.031380948,0.034517545,0.048821226,0.007408039,0.06330118,0.01923239,0.04601576,0.047225676,-0.018242747,0.0244431,-0.0432898,-0.0012258029,-0.009537905,-0.012663749,0.043396346,-0.0028274087,0.035949297,0.024253977,-0.0021095646,0.00353832,0.007205058,0.0050394647,0.015802586,-0.0019890794,0.006122966,0.04152805,0.029647639,0.0015749391,-0.04453934,-0.063102044,0.021228606,0.026976269,0.054299187,-0.03564433,0.03875894,-0.025530897,-0.049100712,0.02293855,0.012110095,0.06772862,-0.013122219,-0.012643257,0.07427451,-0.033903323,0.009813819,-0.027080946,0.026826391,-0.010363682,-0.058703747,-0.022045808,-0.016926596,0.030597435,-0.008578117,-0.05144465,-0.032435942,0.004234336,-0.021710217,-0.0055361404,-0.035259206,-0.0059593827,-0.060889676,-0.012839645,-0.057349194,-0.023043357,0.028611338,-0.025236012,0.034338787,0.028611327,-0.0043820147,0.016847976,0.002238512,0.026494034,0.02672024,-0.03761043,0.071750075,0.021255948,-0.061125882,-0.025150904,-0.0060027293,0.049155846,0.036977742,0.029720012,0.052274738,-0.05018876,0.024934277,0.028814549,-0.031051908,0.02969829,-0.009925254,0.010521157,-0.035032943,-0.01883638,-0.012359009,-0.061111156,-0.005906127,-0.086034834,0.0013135977,-0.05583082,-0.0025974095,-0.049452256,-0.0997317,0.0020456463,-0.032337923,-0.0037818288,0.038178973,0.037251685,-0.0432672,0.016237952,-0.07031599,-0.017383821,0.012034927,-0.010167234,0.018385312,0.05308991,0.093467675,0.0014491623,0.04134314,-0.014567485,0.03311722,0.037765197,0.027764842,0.041582208,0.07071853,0.0010684365,0.029359298,-0.019859463,0.04742819,0.02660091,-0.045807373,0.007685472,-0.023677867,0.011831377,0.01490371,0.02984614,0.017321488,0.013854896,0.06123798,-0.029410655,-0.024947362,0.051174756,-0.0012988296,-0.027065985,0.058618065,0.05439658,-0.018344646,0.02993021,0.0030427524,0.08437757,0.008629861,-0.01314494,0.04537601,0.002943636,-0.021060554,0.0113750165,0.00399991,0.037885487,0.081923276,0.0042717177,0.035372157,0.036496058,0.0145104695,0.013536008,-0.0075457734,-0.045256823,0.028984094,-0.055739455,0.0010623925,0.0018805133,-0.042686366,0.07233631,-0.052352306,0.055003725,0.035400465,-0.006342632,-0.040765546,0.0172314,0.04095327,-0.012943269,0.0018714888,0.015536953,-0.0066845478,0.023284772,0.061666194,0.011132958,0.012686202,0.023743521,0.007846324,-0.043241408,-0.0078071416,-0.0091622565,0.09882292,-0.042772993,0.016703151,0.0084262565,0.09133481,-0.048477944,-0.06207977,0.0031755175,-0.018830204,0.016906139,-0.036829777,-0.026300814,-0.004120131,-0.008855991,-0.0098855235,-0.0075844396,0.040760275,-0.059253793,0.017754031,-0.07757288,-0.011513406,0.0238317,-0.01397409,-0.06260617,0.058323167,0.017299082,-0.014772655,-0.00021079743,-0.04790037,0.057520255,0.031891726,-0.015886506,0.027665302,0.042041663,0.030661725,-0.006816041,0.03152705,0.04181996,0.0140720485,0.030705394,-0.031136485,-0.0032700088,0.009383605,-0.03280157,0.046898007,-0.012123025,0.0315322,-0.06866111,-0.104716435,0.046287585,0.003611463,0.05357118,-0.009454605,-0.043757796,0.020340119,-0.03136111,0.062125444,-0.026571242,-0.01216764,-0.039934892,-0.053459313,-0.010836833,0.05123139,-0.039640006,0.009691581,0.07577024,-0.020915233,0.00079737016,-0.01481311,-0.03176107,0.02864752,-0.013786437,-0.015799575,-0.044989664,-0.024372114,0.032937165,-0.023827657,0.083014555,0.019628156,-0.0026075793,-0.013954396,-0.020657351,-0.050495397,-0.062493578,0.002988451,-0.00028634004,-0.08832408,-0.0020648374,-0.052055314,0.031164387,-0.02884916,0.020936908,-0.032346185,0.027175503,-0.016019532,0.020994887,-0.04837061,0.028716318,-0.09289272,-0.032417286,0.011676276,0.04564361,0.031489536,0.057376888,0.010682423,-0.04802507,-0.026492778,0.010670859,-0.045345742,0.034773894,-0.042051945,0.0072339475,-0.022562752,0.027251622,-0.037117902,-0.027271949,-0.020343019,-0.044730674,0.01902483,-0.032559913,-0.04608599,0.03060915,0.033096746,0.01172755,0.003992308,0.060046993,0.039126653,-0.01088406,0.02477775,0.060048517,0.013328225,0.06668334,-0.047705613,-0.021785136,-0.00335195,0.013028285,-0.03693302,-0.004258798,0.00283674,-0.015760118,0.0031622376,0.06514169,0.057659004,-0.02226559,-0.02375088,-0.017680004,-0.0030416485,-0.012688577,-0.050566945,0.050029345,-0.045983393,-0.0007214838,-0.006011356,-0.043075643,0.0373274,-0.03713776,0.0076691415,0.031416643,-0.014766273,0.014573834,-0.003994234,0.020663394,0.021027917,0.028830947,-0.032390695,-0.061791625,0.046089467,-0.015674513,0.0034746635,-0.038869422,0.012076931,0.021446515,0.043138336,-0.047087844,-0.059941534,-0.006705199,0.10198151,-0.026633007,-0.060809903,-0.013692473,-0.0029841207,0.002566188,0.030068388,0.018442709,-0.011784061,-0.03366461,-0.027921451,-0.048577968,0.057335284,0.021349952,-0.039060157,0.054718614,0.01071738,0.02879707,0.001499281,0.003915847,0.0071544433,-0.089500725,0.016903335,-0.019946614,0.012537366,-0.02347426,-0.023296667,0.027758038,0.020641485,0.036247704,-0.033842556,-0.002685073,-0.056382097,0.020853844,-0.012335758,-0.02376166,-0.045403387,0.04614246,0.011297417,0.04724746,0.033157345,-0.019758018,-0.025197562,-0.0091913575,-0.0006336117,0.039878644,0.08246639,-0.02779448,-0.040347304,0.017903898,0.010567228,0.0075726043,-0.005737518,-0.04153331,-0.01341933,0.0032677508,0.01762904,0.041459028,-0.029483655,-0.008417092,0.029959265,0.04964372,-0.023975935,0.09152754,0.0007412664,-0.024192432,-0.00012158836,0.023358917,-0.010231718,0.039954267,0.0003500156,-0.017975977,-0.03588318,-0.0051337373,-0.033338465,-0.007825263,-0.00906815,0.006624975,-0.025337175,-0.04954423,-0.021869186,0.0039624344,-0.006693264,-0.008373229,-0.018205399,0.017173722,0.018073564,-0.02516338,0.024179883,0.015345432,-0.021518081,-0.007020202,-0.019516438,0.011584994,0.015943872,0.04414836,0.023953311,0.019882327,-0.0030621805,-0.03108535,0.02471599,0.011260484,0.053019863,0.025685947,0.06301517,-0.013807797,0.04528014,-0.03543052,0.022222633,-0.017557098,-0.058022156,0.021669323,-0.021614896,0.0707271,-0.007936474,0.06400556,-0.043436438,0.004494595,-0.009416405,-0.013422616,-0.002512129,0.0039544734,0.00902412,0.016839208,0.029209582,0.0020083927,-0.02245157,0.012448264,-0.053414386,0.0106738815,0.016531281,-0.022705415,0.009440136,0.010685822,0.080443434,0.037857484,-0.014745985,0.009737341,-0.00018420306,-0.03372654,0.09950844,-0.0054105567,0.022432927,0.01560634,-0.013498353,-0.01204838,-0.017938012,-0.0054476666,-0.0054733334,-0.005285272,-0.055237178,0.046601675,0.048915524,-0.0035678858,-0.022224378,0.039435495,-0.03557968,-0.029541114,0.02444723,-0.032952167,-0.046984524,-0.04881888,-0.06888364,-0.026050637,-0.0047165686,-0.062578164,-0.047053386,-0.0070939646,-0.05515244,-0.022799926,0.022958683,0.013983909,0.03697691,0.0032463947,0.07336366,-0.008036619,-0.01345519,-0.03032396,-0.09685305,0.039182957,-0.016208854,-0.016324317,-0.022716183,-0.01533853,0.014996236,0.004162678]}]}","genkit:state":"success"},"displayName":"googleai/text-embedding-004","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"82ab822edf728569":{"spanId":"82ab822edf728569","traceId":"1d53cb41344bbd8765d87c993d7452d9","parentSpanId":"7ce71475e9187970","startTime":1756741495743,"endTime":1756741506712.8591,"attributes":{"http.request.method":"POST","http.request.method_original":"POST","url.full":"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent","url.path":"/v1beta/models/gemini-1.5-pro:generateContent","url.query":"","url.scheme":"https","server.address":"generativelanguage.googleapis.com","server.port":443,"user_agent.original":"node","network.peer.address":"142.250.153.95","network.peer.port":443,"http.response.status_code":200},"displayName":"POST","links":[],"instrumentationLibrary":{"name":"@opentelemetry/instrumentation-undici","version":"0.5.0"},"spanKind":"CLIENT","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"7ce71475e9187970":{"spanId":"7ce71475e9187970","traceId":"1d53cb41344bbd8765d87c993d7452d9","parentSpanId":"6bc4682e2dd3320a","startTime":1756741495741,"endTime":1756741506719.5632,"attributes":{"genkit:type":"action","genkit:metadata:subtype":"model","genkit:name":"googleai/gemini-1.5-pro","genkit:path":"/{generateMasterPrompt,t:flow}/{generate,t:util}/{googleai/gemini-1.5-pro,t:action,s:model}","genkit:input":"{\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"\\n      You are a world-class Master Prompt Engineer, an expert in orchestrating AI agents by creating precise, high-quality instructions.\\n      Your task is to generate a new, complete \\\"Master Prompt\\\" for an AI software engineering agent.\\n      This new prompt must be based on the provided task description and the relevant principles retrieved from the project's knowledge base.\\n\\n      The Master Prompt you generate MUST strictly follow this five-part anatomy:\\n      1.  **Role-Playing:** Assign a specific, expert persona to the AI agent.\\n      2.  **Context Grounding:** Explicitly instruct the agent to ground its response in the project's constitution (CONTEXT.md).\\n      3.  **Task Definition:** Clearly and unambiguously state the primary goal.\\n      4.  **Constraints & Directives:** List all critical non-functional requirements (e.g., security, performance, standards).\\n      5.  **Output Formatting:** Specify the exact structure and format of the desired output.\\n\\n      ---\\n      RELEVANT PRINCIPLES & CONTEXT FROM KNOWLEDGE BASE:\\n      ### **2.1. Overall Architecture**\\n\\nThe system is a **Decoupled Full-Stack Application**. The frontend (Next.js) is responsible for the user experience, while the backend (Firebase Cloud Functions and Genkit) handles all business logic, data mutation, and AI processing.\\n\\n\\n---\\n### **1.3. Technology Stack**\\n\\n*   **Framework:** Next.js with TypeScript, utilizing the App Router.\\n*   **Styling:** Tailwind CSS.\\n*   **Component Library:** `shadcn/ui`. All UI elements must be constructed using these components to ensure consistency.\\n*   **Backend:** Firebase Platform (Authentication, Firestore, Cloud Storage, Cloud Functions).\\n*   **AI Core:** Google's Gemini models, orchestrated via the **Genkit framework**.\\n*   **Mapping:** Mapbox GL JS for all frontend map components.\\n\\n\\n---\\n## **3. Coding Standards & Idioms**\\n\\n*   **Language:** TypeScript. `strict` mode in `tsconfig.json` is enabled and must be adhered to.\\n*   **Naming Conventions:**\\n    *   `camelCase` for variables and functions.\\n    *   `PascalCase` for React components, types, and interfaces.\\n*   **Error Handling:** All asynchronous operations, API calls, and database interactions **MUST** be wrapped in `try...catch` blocks to handle errors gracefully and prevent crashes.\\n*   **Comments:** Comment the \\\"why,\\\" not the \\\"what.\\\" Explain the purpose and intent behind complex logic, especially in relation to a regenerative principle.\\n\\n---\\n\\n\\n---\\n## **5. Testing Philosophy**\\n\\n*   **Unit Tests:** All backend logic (Cloud Functions, Genkit flows) and complex frontend utility functions require unit tests using **Vitest**.\\n*   **Integration Tests:** Critical user flows (e.g., document upload and analysis, stakeholder commenting) must be covered by integration tests.\\n*   **Code Coverage:** A minimum of **80%** unit test coverage is required for all backend logic. This will be enforced by the CI pipeline.\\n*   **End-to-End (E2E) Tests:** Key user journeys (e.g., the full authentication flow) will be tested using **Playwright**.\\n\\n---\\n\\n\\n---\\n## **4. Security & Governance Mandates (Non-Negotiable)**\\n\\n*   **CRITICAL: Secrets Management:** No hardcoded secrets. All API keys and sensitive credentials must be managed via environment variables and a secret manager (e.g., Google Cloud Secret Manager) for production.\\n*   **CRITICAL: Secure by Default:** All Firestore security rules **MUST** be written to `allow read, write: if false;` at the root level. Access must then be explicitly and narrowly granted on a per-collection basis. Permissive rules are forbidden.\\n*   **CRITICAL: Forced Backend Logic:** Client-side write access to core business data (e.g., the `capitals` subcollection) **MUST** be disabled. All mutations must be forced through secure, authenticated, and validated backend Cloud Functions or Genkit flows using the Admin SDK.\\n*   **CRITICAL: Authentication Mandate:** All API routes and server actions that create or modify data **MUST** be protected and require a valid, authenticated Firebase user session. Public, unauthenticated write operations are forbidden.\\n\\n---\\n\\n\\n---\\n### **1.4. Regenerative Principles as Technical Directives**\\n\\nHigh-level principles are translated into concrete, non-negotiable technical rules here.\\n\\n*   **Directive: Enforce Wholeness:** All new API endpoints and Server Components that return data for display **MUST** aggregate data from at least two different Firestore collections representing different Capitals. Code that queries only a single Capital is not permitted without explicit override.\\n*   **Directive: Mandate Potential-Based Framing:** All AI-generated text summaries (e.g., in a \\\"Story of Place\\\" flow) **MUST** conclude with a section titled \\\"Latent Potential\\\" that identifies opportunities and underutilized assets based on the input data. Summaries that only describe problems or deficits are incomplete.\\n*   **Directive: Engineer for Collaboration:** Any new feature that displays community-facing data (e.g., a \\\"Story of Place\\\" narrative) **MUST** be accompanied by a corresponding commenting/feedback feature, including the necessary UI components and Firestore subcollection for storing feedback. Stand-alone, non-interactive displays are not permitted.\\n\\n---\\n\\n\\n---\\n### **2.3. Firestore Data Modeling**\\n\\n*   **Core Strategy:** Prioritize flattened, scalable data structures to ensure long-term performance and resilience.\\n*   **Golden Rule:** Use **root-level collections** for primary entities (e.g., `users`, `places`). Use **subcollections** for unbounded one-to-many relationships (e.g., `documents` under a `place`).\\n*   **CRITICAL Mandate:** **Avoid deeply nested data** in maps or arrays within a single document. This is an anti-pattern that violates our principles of scalability and resource efficiency. Refer to the table below for guidance.\\n\\n#### **Table 1: Firestore Data Modeling Strategies (Decision Matrix)**\\n\\n| Strategy | Description | Regenerative Impact | Agentic Prompt Cue |\\n| :--- | :--- | :--- | :--- |\\n| **Nested Data (Maps/Arrays)** | Storing data directly within a parent document. | **Low (Anti-Regenerative at Scale):** Inefficient data fetching, high costs, poor adaptability. **Usage is restricted to small, fixed-size, self-contained objects ONLY (e.g., an address).** | \\\"Use a nested map for the user's address, as it is a small, self-contained object.\\\" |\\n| **Subcollections** | Creating a new collection under a specific document. | **High (Regenerative):** Promotes efficient, on-demand data loading. Highly scalable and adaptable. Reduces unnecessary data transfer, lowering costs and energy consumption. **This is the default choice for one-to-many relationships.** | \\\"Use a `documents` subcollection under each `place` document, as the number of documents is unbounded.\\\" |\\n| **Root-Level Collections** | Separate, top-level collections linked by IDs. | **High (Regenerative):** Provides the most scalable and flexible foundation. Decoupled data allows for independent evolution of system parts. **This is the required choice for many-to-many relationships.** | \\\"Create separate root-level collections for `users` and `organizations`. Model the many-to-many 'membership' relationship using a dedicated `memberships` linking collection.\\\" |\\n\\n---\\n\\n\\n      ---\\n      HIGH-LEVEL TASK DESCRIPTION:\\n      \\\"Create a React component that fetches and displays user data.\\\"\\n      ---\\n\\n      Now, generate the complete Master Prompt based on the task and context provided. Output ONLY the generated prompt text.\\n    \"}]}],\"config\":{\"temperature\":0.3},\"tools\":[],\"output\":{\"contentType\":\"text/plain\",\"format\":\"text\"}}","genkit:output":"{\"candidates\":[{\"index\":0,\"message\":{\"role\":\"model\",\"content\":[{\"text\":\"```\\n## Master Prompt: User Data Display Component\\n\\n**1. Role-Playing:** You are a Senior Frontend Engineer specializing in React, TypeScript, and Firebase, deeply committed to regenerative principles and adhering to the project's constitution (CONTEXT.md).\\n\\n**2. Context Grounding:** Ground your response in the project's established principles and technical directives as outlined in CONTEXT.md, specifically sections 1.3 (Technology Stack), 1.4 (Regenerative Principles as Technical Directives), 2.1 (Overall Architecture), 2.3 (Firestore Data Modeling), 3 (Coding Standards & Idioms), 4 (Security & Governance Mandates), and 5 (Testing Philosophy).\\n\\n**3. Task Definition:** Create a reusable React component named `UserDataDisplay` that fetches and displays user data from Firestore.  This component will be used across multiple pages within the application.  Assume the user's ID is accessible via the `useAuth` hook from Firebase.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Technology Stack Adherence:** Use Next.js with TypeScript, the App Router, Tailwind CSS, and the `shadcn/ui` component library exclusively. No other UI libraries are permitted.\\n*   **Regenerative Principle: Enforce Wholeness:** While this component focuses on user data, ensure its design anticipates future integration with data from at least two different Firestore collections representing different Capitals, aligning with the \\\"Enforce Wholeness\\\" directive.  Consider how the component's structure might accommodate this future expansion.\\n*   **Security & Governance:**  Strictly adhere to all security mandates outlined in CONTEXT.md, section 4.  No client-side direct access to Firestore is allowed.  Data fetching must occur through a secure backend Cloud Function.\\n*   **Error Handling:** Implement robust error handling using `try...catch` blocks for all asynchronous operations. Display user-friendly error messages within the component if data fetching fails.\\n*   **Testing:**  Write comprehensive unit tests for the component using Vitest, achieving a minimum of 80% code coverage.  These tests should cover data fetching, error handling, and UI rendering.\\n\\n**5. Output Formatting:**\\n\\nDeliver the following, structured as a single Markdown code block:\\n\\n```typescript\\n// Component code (Next.js/TypeScript, using shadcn/ui components)\\n// ...\\n\\n// Unit tests (Vitest)\\n// ...\\n```\\n\\nThe code block must contain:\\n\\n1.  The complete, functional `UserDataDisplay` component code.\\n2.  Comprehensive unit tests for the component using Vitest.\\n3.  JSDoc-style comments explaining the \\\"why\\\" behind design choices, especially concerning regenerative principles and security considerations.\\n\\nEnsure all code adheres to the coding standards and idioms defined in CONTEXT.md, section 3.\\n```\\n\"}]},\"finishReason\":\"stop\",\"custom\":{}}],\"custom\":{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"```\\n## Master Prompt: User Data Display Component\\n\\n**1. Role-Playing:** You are a Senior Frontend Engineer specializing in React, TypeScript, and Firebase, deeply committed to regenerative principles and adhering to the project's constitution (CONTEXT.md).\\n\\n**2. Context Grounding:** Ground your response in the project's established principles and technical directives as outlined in CONTEXT.md, specifically sections 1.3 (Technology Stack), 1.4 (Regenerative Principles as Technical Directives), 2.1 (Overall Architecture), 2.3 (Firestore Data Modeling), 3 (Coding Standards & Idioms), 4 (Security & Governance Mandates), and 5 (Testing Philosophy).\\n\\n**3. Task Definition:** Create a reusable React component named `UserDataDisplay` that fetches and displays user data from Firestore.  This component will be used across multiple pages within the application.  Assume the user's ID is accessible via the `useAuth` hook from Firebase.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Technology Stack Adherence:** Use Next.js with TypeScript, the App Router, Tailwind CSS, and the `shadcn/ui` component library exclusively. No other UI libraries are permitted.\\n*   **Regenerative Principle: Enforce Wholeness:** While this component focuses on user data, ensure its design anticipates future integration with data from at least two different Firestore collections representing different Capitals, aligning with the \\\"Enforce Wholeness\\\" directive.  Consider how the component's structure might accommodate this future expansion.\\n*   **Security & Governance:**  Strictly adhere to all security mandates outlined in CONTEXT.md, section 4.  No client-side direct access to Firestore is allowed.  Data fetching must occur through a secure backend Cloud Function.\\n*   **Error Handling:** Implement robust error handling using `try...catch` blocks for all asynchronous operations. Display user-friendly error messages within the component if data fetching fails.\\n*   **Testing:**  Write comprehensive unit tests for the component using Vitest, achieving a minimum of 80% code coverage.  These tests should cover data fetching, error handling, and UI rendering.\\n\\n**5. Output Formatting:**\\n\\nDeliver the following, structured as a single Markdown code block:\\n\\n```typescript\\n// Component code (Next.js/TypeScript, using shadcn/ui components)\\n// ...\\n\\n// Unit tests (Vitest)\\n// ...\\n```\\n\\nThe code block must contain:\\n\\n1.  The complete, functional `UserDataDisplay` component code.\\n2.  Comprehensive unit tests for the component using Vitest.\\n3.  JSDoc-style comments explaining the \\\"why\\\" behind design choices, especially concerning regenerative principles and security considerations.\\n\\nEnsure all code adheres to the coding standards and idioms defined in CONTEXT.md, section 3.\\n```\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"avgLogprobs\":-0.1251102434751581}],\"usageMetadata\":{\"promptTokenCount\":1678,\"candidatesTokenCount\":598,\"totalTokenCount\":2276,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1678}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":598}]},\"modelVersion\":\"gemini-1.5-pro-002\",\"responseId\":\"d7-1aNeIMMqNvdIPpuGp6Ag\"},\"usage\":{\"inputCharacters\":7525,\"inputImages\":0,\"inputVideos\":0,\"inputAudioFiles\":0,\"outputCharacters\":2762,\"outputImages\":0,\"outputVideos\":0,\"outputAudioFiles\":0,\"inputTokens\":1678,\"outputTokens\":598,\"totalTokens\":2276},\"latencyMs\":10977.912588000007}","genkit:state":"success"},"displayName":"googleai/gemini-1.5-pro","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"6bc4682e2dd3320a":{"spanId":"6bc4682e2dd3320a","traceId":"1d53cb41344bbd8765d87c993d7452d9","parentSpanId":"5747a010eae754fe","startTime":1756741495738,"endTime":1756741506722.976,"attributes":{"genkit:type":"util","genkit:name":"generate","genkit:path":"/{generateMasterPrompt,t:flow}/{generate,t:util}","genkit:input":"{\"model\":\"googleai/gemini-1.5-pro\",\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"\\n      You are a world-class Master Prompt Engineer, an expert in orchestrating AI agents by creating precise, high-quality instructions.\\n      Your task is to generate a new, complete \\\"Master Prompt\\\" for an AI software engineering agent.\\n      This new prompt must be based on the provided task description and the relevant principles retrieved from the project's knowledge base.\\n\\n      The Master Prompt you generate MUST strictly follow this five-part anatomy:\\n      1.  **Role-Playing:** Assign a specific, expert persona to the AI agent.\\n      2.  **Context Grounding:** Explicitly instruct the agent to ground its response in the project's constitution (CONTEXT.md).\\n      3.  **Task Definition:** Clearly and unambiguously state the primary goal.\\n      4.  **Constraints & Directives:** List all critical non-functional requirements (e.g., security, performance, standards).\\n      5.  **Output Formatting:** Specify the exact structure and format of the desired output.\\n\\n      ---\\n      RELEVANT PRINCIPLES & CONTEXT FROM KNOWLEDGE BASE:\\n      ### **2.1. Overall Architecture**\\n\\nThe system is a **Decoupled Full-Stack Application**. The frontend (Next.js) is responsible for the user experience, while the backend (Firebase Cloud Functions and Genkit) handles all business logic, data mutation, and AI processing.\\n\\n\\n---\\n### **1.3. Technology Stack**\\n\\n*   **Framework:** Next.js with TypeScript, utilizing the App Router.\\n*   **Styling:** Tailwind CSS.\\n*   **Component Library:** `shadcn/ui`. All UI elements must be constructed using these components to ensure consistency.\\n*   **Backend:** Firebase Platform (Authentication, Firestore, Cloud Storage, Cloud Functions).\\n*   **AI Core:** Google's Gemini models, orchestrated via the **Genkit framework**.\\n*   **Mapping:** Mapbox GL JS for all frontend map components.\\n\\n\\n---\\n## **3. Coding Standards & Idioms**\\n\\n*   **Language:** TypeScript. `strict` mode in `tsconfig.json` is enabled and must be adhered to.\\n*   **Naming Conventions:**\\n    *   `camelCase` for variables and functions.\\n    *   `PascalCase` for React components, types, and interfaces.\\n*   **Error Handling:** All asynchronous operations, API calls, and database interactions **MUST** be wrapped in `try...catch` blocks to handle errors gracefully and prevent crashes.\\n*   **Comments:** Comment the \\\"why,\\\" not the \\\"what.\\\" Explain the purpose and intent behind complex logic, especially in relation to a regenerative principle.\\n\\n---\\n\\n\\n---\\n## **5. Testing Philosophy**\\n\\n*   **Unit Tests:** All backend logic (Cloud Functions, Genkit flows) and complex frontend utility functions require unit tests using **Vitest**.\\n*   **Integration Tests:** Critical user flows (e.g., document upload and analysis, stakeholder commenting) must be covered by integration tests.\\n*   **Code Coverage:** A minimum of **80%** unit test coverage is required for all backend logic. This will be enforced by the CI pipeline.\\n*   **End-to-End (E2E) Tests:** Key user journeys (e.g., the full authentication flow) will be tested using **Playwright**.\\n\\n---\\n\\n\\n---\\n## **4. Security & Governance Mandates (Non-Negotiable)**\\n\\n*   **CRITICAL: Secrets Management:** No hardcoded secrets. All API keys and sensitive credentials must be managed via environment variables and a secret manager (e.g., Google Cloud Secret Manager) for production.\\n*   **CRITICAL: Secure by Default:** All Firestore security rules **MUST** be written to `allow read, write: if false;` at the root level. Access must then be explicitly and narrowly granted on a per-collection basis. Permissive rules are forbidden.\\n*   **CRITICAL: Forced Backend Logic:** Client-side write access to core business data (e.g., the `capitals` subcollection) **MUST** be disabled. All mutations must be forced through secure, authenticated, and validated backend Cloud Functions or Genkit flows using the Admin SDK.\\n*   **CRITICAL: Authentication Mandate:** All API routes and server actions that create or modify data **MUST** be protected and require a valid, authenticated Firebase user session. Public, unauthenticated write operations are forbidden.\\n\\n---\\n\\n\\n---\\n### **1.4. Regenerative Principles as Technical Directives**\\n\\nHigh-level principles are translated into concrete, non-negotiable technical rules here.\\n\\n*   **Directive: Enforce Wholeness:** All new API endpoints and Server Components that return data for display **MUST** aggregate data from at least two different Firestore collections representing different Capitals. Code that queries only a single Capital is not permitted without explicit override.\\n*   **Directive: Mandate Potential-Based Framing:** All AI-generated text summaries (e.g., in a \\\"Story of Place\\\" flow) **MUST** conclude with a section titled \\\"Latent Potential\\\" that identifies opportunities and underutilized assets based on the input data. Summaries that only describe problems or deficits are incomplete.\\n*   **Directive: Engineer for Collaboration:** Any new feature that displays community-facing data (e.g., a \\\"Story of Place\\\" narrative) **MUST** be accompanied by a corresponding commenting/feedback feature, including the necessary UI components and Firestore subcollection for storing feedback. Stand-alone, non-interactive displays are not permitted.\\n\\n---\\n\\n\\n---\\n### **2.3. Firestore Data Modeling**\\n\\n*   **Core Strategy:** Prioritize flattened, scalable data structures to ensure long-term performance and resilience.\\n*   **Golden Rule:** Use **root-level collections** for primary entities (e.g., `users`, `places`). Use **subcollections** for unbounded one-to-many relationships (e.g., `documents` under a `place`).\\n*   **CRITICAL Mandate:** **Avoid deeply nested data** in maps or arrays within a single document. This is an anti-pattern that violates our principles of scalability and resource efficiency. Refer to the table below for guidance.\\n\\n#### **Table 1: Firestore Data Modeling Strategies (Decision Matrix)**\\n\\n| Strategy | Description | Regenerative Impact | Agentic Prompt Cue |\\n| :--- | :--- | :--- | :--- |\\n| **Nested Data (Maps/Arrays)** | Storing data directly within a parent document. | **Low (Anti-Regenerative at Scale):** Inefficient data fetching, high costs, poor adaptability. **Usage is restricted to small, fixed-size, self-contained objects ONLY (e.g., an address).** | \\\"Use a nested map for the user's address, as it is a small, self-contained object.\\\" |\\n| **Subcollections** | Creating a new collection under a specific document. | **High (Regenerative):** Promotes efficient, on-demand data loading. Highly scalable and adaptable. Reduces unnecessary data transfer, lowering costs and energy consumption. **This is the default choice for one-to-many relationships.** | \\\"Use a `documents` subcollection under each `place` document, as the number of documents is unbounded.\\\" |\\n| **Root-Level Collections** | Separate, top-level collections linked by IDs. | **High (Regenerative):** Provides the most scalable and flexible foundation. Decoupled data allows for independent evolution of system parts. **This is the required choice for many-to-many relationships.** | \\\"Create separate root-level collections for `users` and `organizations`. Model the many-to-many 'membership' relationship using a dedicated `memberships` linking collection.\\\" |\\n\\n---\\n\\n\\n      ---\\n      HIGH-LEVEL TASK DESCRIPTION:\\n      \\\"Create a React component that fetches and displays user data.\\\"\\n      ---\\n\\n      Now, generate the complete Master Prompt based on the task and context provided. Output ONLY the generated prompt text.\\n    \"}]}],\"config\":{\"temperature\":0.3},\"output\":{\"format\":\"text\",\"jsonSchema\":null}}","genkit:output":"{\"message\":{\"role\":\"model\",\"content\":[{\"text\":\"```\\n## Master Prompt: User Data Display Component\\n\\n**1. Role-Playing:** You are a Senior Frontend Engineer specializing in React, TypeScript, and Firebase, deeply committed to regenerative principles and adhering to the project's constitution (CONTEXT.md).\\n\\n**2. Context Grounding:** Ground your response in the project's established principles and technical directives as outlined in CONTEXT.md, specifically sections 1.3 (Technology Stack), 1.4 (Regenerative Principles as Technical Directives), 2.1 (Overall Architecture), 2.3 (Firestore Data Modeling), 3 (Coding Standards & Idioms), 4 (Security & Governance Mandates), and 5 (Testing Philosophy).\\n\\n**3. Task Definition:** Create a reusable React component named `UserDataDisplay` that fetches and displays user data from Firestore.  This component will be used across multiple pages within the application.  Assume the user's ID is accessible via the `useAuth` hook from Firebase.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Technology Stack Adherence:** Use Next.js with TypeScript, the App Router, Tailwind CSS, and the `shadcn/ui` component library exclusively. No other UI libraries are permitted.\\n*   **Regenerative Principle: Enforce Wholeness:** While this component focuses on user data, ensure its design anticipates future integration with data from at least two different Firestore collections representing different Capitals, aligning with the \\\"Enforce Wholeness\\\" directive.  Consider how the component's structure might accommodate this future expansion.\\n*   **Security & Governance:**  Strictly adhere to all security mandates outlined in CONTEXT.md, section 4.  No client-side direct access to Firestore is allowed.  Data fetching must occur through a secure backend Cloud Function.\\n*   **Error Handling:** Implement robust error handling using `try...catch` blocks for all asynchronous operations. Display user-friendly error messages within the component if data fetching fails.\\n*   **Testing:**  Write comprehensive unit tests for the component using Vitest, achieving a minimum of 80% code coverage.  These tests should cover data fetching, error handling, and UI rendering.\\n\\n**5. Output Formatting:**\\n\\nDeliver the following, structured as a single Markdown code block:\\n\\n```typescript\\n// Component code (Next.js/TypeScript, using shadcn/ui components)\\n// ...\\n\\n// Unit tests (Vitest)\\n// ...\\n```\\n\\nThe code block must contain:\\n\\n1.  The complete, functional `UserDataDisplay` component code.\\n2.  Comprehensive unit tests for the component using Vitest.\\n3.  JSDoc-style comments explaining the \\\"why\\\" behind design choices, especially concerning regenerative principles and security considerations.\\n\\nEnsure all code adheres to the coding standards and idioms defined in CONTEXT.md, section 3.\\n```\\n\"}]},\"finishReason\":\"stop\",\"usage\":{\"inputCharacters\":7525,\"inputImages\":0,\"inputVideos\":0,\"inputAudioFiles\":0,\"outputCharacters\":2762,\"outputImages\":0,\"outputVideos\":0,\"outputAudioFiles\":0,\"inputTokens\":1678,\"outputTokens\":598,\"totalTokens\":2276},\"custom\":{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"```\\n## Master Prompt: User Data Display Component\\n\\n**1. Role-Playing:** You are a Senior Frontend Engineer specializing in React, TypeScript, and Firebase, deeply committed to regenerative principles and adhering to the project's constitution (CONTEXT.md).\\n\\n**2. Context Grounding:** Ground your response in the project's established principles and technical directives as outlined in CONTEXT.md, specifically sections 1.3 (Technology Stack), 1.4 (Regenerative Principles as Technical Directives), 2.1 (Overall Architecture), 2.3 (Firestore Data Modeling), 3 (Coding Standards & Idioms), 4 (Security & Governance Mandates), and 5 (Testing Philosophy).\\n\\n**3. Task Definition:** Create a reusable React component named `UserDataDisplay` that fetches and displays user data from Firestore.  This component will be used across multiple pages within the application.  Assume the user's ID is accessible via the `useAuth` hook from Firebase.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Technology Stack Adherence:** Use Next.js with TypeScript, the App Router, Tailwind CSS, and the `shadcn/ui` component library exclusively. No other UI libraries are permitted.\\n*   **Regenerative Principle: Enforce Wholeness:** While this component focuses on user data, ensure its design anticipates future integration with data from at least two different Firestore collections representing different Capitals, aligning with the \\\"Enforce Wholeness\\\" directive.  Consider how the component's structure might accommodate this future expansion.\\n*   **Security & Governance:**  Strictly adhere to all security mandates outlined in CONTEXT.md, section 4.  No client-side direct access to Firestore is allowed.  Data fetching must occur through a secure backend Cloud Function.\\n*   **Error Handling:** Implement robust error handling using `try...catch` blocks for all asynchronous operations. Display user-friendly error messages within the component if data fetching fails.\\n*   **Testing:**  Write comprehensive unit tests for the component using Vitest, achieving a minimum of 80% code coverage.  These tests should cover data fetching, error handling, and UI rendering.\\n\\n**5. Output Formatting:**\\n\\nDeliver the following, structured as a single Markdown code block:\\n\\n```typescript\\n// Component code (Next.js/TypeScript, using shadcn/ui components)\\n// ...\\n\\n// Unit tests (Vitest)\\n// ...\\n```\\n\\nThe code block must contain:\\n\\n1.  The complete, functional `UserDataDisplay` component code.\\n2.  Comprehensive unit tests for the component using Vitest.\\n3.  JSDoc-style comments explaining the \\\"why\\\" behind design choices, especially concerning regenerative principles and security considerations.\\n\\nEnsure all code adheres to the coding standards and idioms defined in CONTEXT.md, section 3.\\n```\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"avgLogprobs\":-0.1251102434751581}],\"usageMetadata\":{\"promptTokenCount\":1678,\"candidatesTokenCount\":598,\"totalTokenCount\":2276,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1678}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":598}]},\"modelVersion\":\"gemini-1.5-pro-002\",\"responseId\":\"d7-1aNeIMMqNvdIPpuGp6Ag\"},\"request\":{\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"\\n      You are a world-class Master Prompt Engineer, an expert in orchestrating AI agents by creating precise, high-quality instructions.\\n      Your task is to generate a new, complete \\\"Master Prompt\\\" for an AI software engineering agent.\\n      This new prompt must be based on the provided task description and the relevant principles retrieved from the project's knowledge base.\\n\\n      The Master Prompt you generate MUST strictly follow this five-part anatomy:\\n      1.  **Role-Playing:** Assign a specific, expert persona to the AI agent.\\n      2.  **Context Grounding:** Explicitly instruct the agent to ground its response in the project's constitution (CONTEXT.md).\\n      3.  **Task Definition:** Clearly and unambiguously state the primary goal.\\n      4.  **Constraints & Directives:** List all critical non-functional requirements (e.g., security, performance, standards).\\n      5.  **Output Formatting:** Specify the exact structure and format of the desired output.\\n\\n      ---\\n      RELEVANT PRINCIPLES & CONTEXT FROM KNOWLEDGE BASE:\\n      ### **2.1. Overall Architecture**\\n\\nThe system is a **Decoupled Full-Stack Application**. The frontend (Next.js) is responsible for the user experience, while the backend (Firebase Cloud Functions and Genkit) handles all business logic, data mutation, and AI processing.\\n\\n\\n---\\n### **1.3. Technology Stack**\\n\\n*   **Framework:** Next.js with TypeScript, utilizing the App Router.\\n*   **Styling:** Tailwind CSS.\\n*   **Component Library:** `shadcn/ui`. All UI elements must be constructed using these components to ensure consistency.\\n*   **Backend:** Firebase Platform (Authentication, Firestore, Cloud Storage, Cloud Functions).\\n*   **AI Core:** Google's Gemini models, orchestrated via the **Genkit framework**.\\n*   **Mapping:** Mapbox GL JS for all frontend map components.\\n\\n\\n---\\n## **3. Coding Standards & Idioms**\\n\\n*   **Language:** TypeScript. `strict` mode in `tsconfig.json` is enabled and must be adhered to.\\n*   **Naming Conventions:**\\n    *   `camelCase` for variables and functions.\\n    *   `PascalCase` for React components, types, and interfaces.\\n*   **Error Handling:** All asynchronous operations, API calls, and database interactions **MUST** be wrapped in `try...catch` blocks to handle errors gracefully and prevent crashes.\\n*   **Comments:** Comment the \\\"why,\\\" not the \\\"what.\\\" Explain the purpose and intent behind complex logic, especially in relation to a regenerative principle.\\n\\n---\\n\\n\\n---\\n## **5. Testing Philosophy**\\n\\n*   **Unit Tests:** All backend logic (Cloud Functions, Genkit flows) and complex frontend utility functions require unit tests using **Vitest**.\\n*   **Integration Tests:** Critical user flows (e.g., document upload and analysis, stakeholder commenting) must be covered by integration tests.\\n*   **Code Coverage:** A minimum of **80%** unit test coverage is required for all backend logic. This will be enforced by the CI pipeline.\\n*   **End-to-End (E2E) Tests:** Key user journeys (e.g., the full authentication flow) will be tested using **Playwright**.\\n\\n---\\n\\n\\n---\\n## **4. Security & Governance Mandates (Non-Negotiable)**\\n\\n*   **CRITICAL: Secrets Management:** No hardcoded secrets. All API keys and sensitive credentials must be managed via environment variables and a secret manager (e.g., Google Cloud Secret Manager) for production.\\n*   **CRITICAL: Secure by Default:** All Firestore security rules **MUST** be written to `allow read, write: if false;` at the root level. Access must then be explicitly and narrowly granted on a per-collection basis. Permissive rules are forbidden.\\n*   **CRITICAL: Forced Backend Logic:** Client-side write access to core business data (e.g., the `capitals` subcollection) **MUST** be disabled. All mutations must be forced through secure, authenticated, and validated backend Cloud Functions or Genkit flows using the Admin SDK.\\n*   **CRITICAL: Authentication Mandate:** All API routes and server actions that create or modify data **MUST** be protected and require a valid, authenticated Firebase user session. Public, unauthenticated write operations are forbidden.\\n\\n---\\n\\n\\n---\\n### **1.4. Regenerative Principles as Technical Directives**\\n\\nHigh-level principles are translated into concrete, non-negotiable technical rules here.\\n\\n*   **Directive: Enforce Wholeness:** All new API endpoints and Server Components that return data for display **MUST** aggregate data from at least two different Firestore collections representing different Capitals. Code that queries only a single Capital is not permitted without explicit override.\\n*   **Directive: Mandate Potential-Based Framing:** All AI-generated text summaries (e.g., in a \\\"Story of Place\\\" flow) **MUST** conclude with a section titled \\\"Latent Potential\\\" that identifies opportunities and underutilized assets based on the input data. Summaries that only describe problems or deficits are incomplete.\\n*   **Directive: Engineer for Collaboration:** Any new feature that displays community-facing data (e.g., a \\\"Story of Place\\\" narrative) **MUST** be accompanied by a corresponding commenting/feedback feature, including the necessary UI components and Firestore subcollection for storing feedback. Stand-alone, non-interactive displays are not permitted.\\n\\n---\\n\\n\\n---\\n### **2.3. Firestore Data Modeling**\\n\\n*   **Core Strategy:** Prioritize flattened, scalable data structures to ensure long-term performance and resilience.\\n*   **Golden Rule:** Use **root-level collections** for primary entities (e.g., `users`, `places`). Use **subcollections** for unbounded one-to-many relationships (e.g., `documents` under a `place`).\\n*   **CRITICAL Mandate:** **Avoid deeply nested data** in maps or arrays within a single document. This is an anti-pattern that violates our principles of scalability and resource efficiency. Refer to the table below for guidance.\\n\\n#### **Table 1: Firestore Data Modeling Strategies (Decision Matrix)**\\n\\n| Strategy | Description | Regenerative Impact | Agentic Prompt Cue |\\n| :--- | :--- | :--- | :--- |\\n| **Nested Data (Maps/Arrays)** | Storing data directly within a parent document. | **Low (Anti-Regenerative at Scale):** Inefficient data fetching, high costs, poor adaptability. **Usage is restricted to small, fixed-size, self-contained objects ONLY (e.g., an address).** | \\\"Use a nested map for the user's address, as it is a small, self-contained object.\\\" |\\n| **Subcollections** | Creating a new collection under a specific document. | **High (Regenerative):** Promotes efficient, on-demand data loading. Highly scalable and adaptable. Reduces unnecessary data transfer, lowering costs and energy consumption. **This is the default choice for one-to-many relationships.** | \\\"Use a `documents` subcollection under each `place` document, as the number of documents is unbounded.\\\" |\\n| **Root-Level Collections** | Separate, top-level collections linked by IDs. | **High (Regenerative):** Provides the most scalable and flexible foundation. Decoupled data allows for independent evolution of system parts. **This is the required choice for many-to-many relationships.** | \\\"Create separate root-level collections for `users` and `organizations`. Model the many-to-many 'membership' relationship using a dedicated `memberships` linking collection.\\\" |\\n\\n---\\n\\n\\n      ---\\n      HIGH-LEVEL TASK DESCRIPTION:\\n      \\\"Create a React component that fetches and displays user data.\\\"\\n      ---\\n\\n      Now, generate the complete Master Prompt based on the task and context provided. Output ONLY the generated prompt text.\\n    \"}]}],\"config\":{\"temperature\":0.3},\"tools\":[],\"output\":{\"contentType\":\"text/plain\",\"format\":\"text\"}}}","genkit:state":"success"},"displayName":"generate","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"5747a010eae754fe":{"spanId":"5747a010eae754fe","traceId":"1d53cb41344bbd8765d87c993d7452d9","startTime":1756741495438,"endTime":1756741506724.5332,"attributes":{"genkit:type":"action","genkit:metadata:subtype":"flow","genkit:name":"generateMasterPrompt","genkit:isRoot":true,"genkit:path":"/{generateMasterPrompt,t:flow}","genkit:metadata:context":"{}","genkit:input":"\"Create a React component that fetches and displays user data.\"","genkit:output":"\"```\\n## Master Prompt: User Data Display Component\\n\\n**1. Role-Playing:** You are a Senior Frontend Engineer specializing in React, TypeScript, and Firebase, deeply committed to regenerative principles and adhering to the project's constitution (CONTEXT.md).\\n\\n**2. Context Grounding:** Ground your response in the project's established principles and technical directives as outlined in CONTEXT.md, specifically sections 1.3 (Technology Stack), 1.4 (Regenerative Principles as Technical Directives), 2.1 (Overall Architecture), 2.3 (Firestore Data Modeling), 3 (Coding Standards & Idioms), 4 (Security & Governance Mandates), and 5 (Testing Philosophy).\\n\\n**3. Task Definition:** Create a reusable React component named `UserDataDisplay` that fetches and displays user data from Firestore.  This component will be used across multiple pages within the application.  Assume the user's ID is accessible via the `useAuth` hook from Firebase.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Technology Stack Adherence:** Use Next.js with TypeScript, the App Router, Tailwind CSS, and the `shadcn/ui` component library exclusively. No other UI libraries are permitted.\\n*   **Regenerative Principle: Enforce Wholeness:** While this component focuses on user data, ensure its design anticipates future integration with data from at least two different Firestore collections representing different Capitals, aligning with the \\\"Enforce Wholeness\\\" directive.  Consider how the component's structure might accommodate this future expansion.\\n*   **Security & Governance:**  Strictly adhere to all security mandates outlined in CONTEXT.md, section 4.  No client-side direct access to Firestore is allowed.  Data fetching must occur through a secure backend Cloud Function.\\n*   **Error Handling:** Implement robust error handling using `try...catch` blocks for all asynchronous operations. Display user-friendly error messages within the component if data fetching fails.\\n*   **Testing:**  Write comprehensive unit tests for the component using Vitest, achieving a minimum of 80% code coverage.  These tests should cover data fetching, error handling, and UI rendering.\\n\\n**5. Output Formatting:**\\n\\nDeliver the following, structured as a single Markdown code block:\\n\\n```typescript\\n// Component code (Next.js/TypeScript, using shadcn/ui components)\\n// ...\\n\\n// Unit tests (Vitest)\\n// ...\\n```\\n\\nThe code block must contain:\\n\\n1.  The complete, functional `UserDataDisplay` component code.\\n2.  Comprehensive unit tests for the component using Vitest.\\n3.  JSDoc-style comments explaining the \\\"why\\\" behind design choices, especially concerning regenerative principles and security considerations.\\n\\nEnsure all code adheres to the coding standards and idioms defined in CONTEXT.md, section 3.\\n```\\n\"","genkit:state":"success"},"displayName":"generateMasterPrompt","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}}},"displayName":"generateMasterPrompt","startTime":1756741495438,"endTime":1756741506724.5332}
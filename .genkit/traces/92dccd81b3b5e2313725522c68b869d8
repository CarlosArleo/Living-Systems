{"traceId":"92dccd81b3b5e2313725522c68b869d8","spans":{"d8bb20bc10b3bba6":{"spanId":"d8bb20bc10b3bba6","traceId":"92dccd81b3b5e2313725522c68b869d8","parentSpanId":"9db167841b1a0fdc","startTime":1756669011435,"endTime":1756669011768.7415,"attributes":{"http.request.method":"POST","http.request.method_original":"POST","url.full":"https://generativelanguage.googleapis.com/v1beta/models/text-embedding-004:embedContent","url.path":"/v1beta/models/text-embedding-004:embedContent","url.query":"","url.scheme":"https","server.address":"generativelanguage.googleapis.com","server.port":443,"user_agent.original":"node","network.peer.address":"108.177.119.95","network.peer.port":443,"http.response.status_code":200},"displayName":"POST","links":[],"instrumentationLibrary":{"name":"@opentelemetry/instrumentation-undici","version":"0.5.0"},"spanKind":"CLIENT","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"9db167841b1a0fdc":{"spanId":"9db167841b1a0fdc","traceId":"92dccd81b3b5e2313725522c68b869d8","parentSpanId":"6bbe85f13988f0c5","startTime":1756669011432,"endTime":1756669011774.417,"attributes":{"genkit:type":"action","genkit:metadata:subtype":"embedder","genkit:name":"googleai/text-embedding-004","genkit:path":"/{generateMasterPrompt,t:flow}/{googleai/text-embedding-004,t:action,s:embedder}","genkit:input":"{\"input\":[{\"content\":[{\"text\":\"This is a test\"}]}],\"options\":{}}","genkit:output":"{\"embeddings\":[{\"embedding\":[0.039036147,-0.013903834,-0.07502418,0.01174706,0.010399171,-0.00764396,0.055470366,0.030608524,-0.0073706736,0.034722,0.005156126,0.022697277,0.044303082,-0.030419428,-0.006145324,-0.025626076,0.016978078,0.059023727,-0.063104436,-0.02344831,0.011834383,-0.0431493,-0.0059166797,-0.052780952,-0.035064273,-0.030404953,0.003811925,0.0087694265,0.018232714,-0.027872592,0.014995332,0.04640807,0.03983165,0.0034458262,0.022609588,-0.009340874,-0.012371985,0.012828796,0.021602368,-0.09006871,0.008624025,0.0794047,-0.08605345,-0.011442814,-0.01928445,-0.043787118,0.031121626,0.0069657452,0.009686647,-0.00040464872,0.045567375,0.04308909,-0.05912175,0.0032328735,-0.0010165821,-0.010180841,0.008460836,-0.048104193,0.049914412,0.011203627,0.028892847,-0.030066721,0.0022919048,-0.00076280057,0.017908596,-0.012030534,0.02800822,-0.0112124,-0.03421412,-0.037998274,-0.07333448,0.018802058,0.008828171,-0.012106113,-0.020467818,-0.0128501,0.015118065,-0.03614046,0.04001433,0.036847897,0.016828023,0.0013601172,0.051034,0.061738864,0.050521288,0.0034720353,0.0866135,-0.048109505,-0.014317457,0.017696287,0.10062082,0.034470674,-0.02246786,0.01640147,0.0016097496,0.017799221,-0.055052668,-0.002536126,0.04912448,0.095318206,0.028514894,0.018400263,0.02518114,-0.03416358,-0.009705409,0.009617813,-0.07789866,0.018469559,-0.03337222,-0.012648731,0.0062741525,-0.03414407,0.02988311,-0.018009095,-0.05751454,-0.011336908,-0.0466697,0.044300407,-0.010450323,-0.0006482678,-0.00053761306,0.038884968,-0.05720063,0.0036418478,0.038615037,0.0064208275,0.0006521497,0.010049919,-0.0383336,-0.043005966,-0.00026645357,-0.07526639,0.058639128,0.027075682,-0.06289082,-0.0071836654,0.033626553,0.09205557,0.012503778,-0.016462326,-0.004175448,-0.015636675,-0.10094082,-0.0071586776,0.0013881621,0.0058125583,0.023792174,0.013695931,0.018836444,-0.02626825,-0.024308765,0.008701117,0.013816353,-0.023034845,0.005403843,0.007852266,0.048804015,-0.052670237,0.066574365,-0.01725455,0.032962155,-0.061672915,0.035752382,-0.0038936194,-0.02722135,-0.021009715,0.02329457,-0.0539961,0.0367089,-0.053348698,0.009445464,-0.03699341,-0.018558804,0.024667958,-0.0018476994,-0.017132662,-0.040903814,0.011093679,0.029057445,-0.060619857,0.05927982,-0.014724393,0.02052414,-0.09434011,-0.017662903,-0.006093668,-0.0074502844,-0.0148549285,0.08467205,0.044547316,0.036730573,0.0068198284,0.07879817,0.021553317,0.013135117,0.08906174,0.038460143,-0.031656966,-0.015653642,0.041939758,0.04421236,0.022116054,-0.0048126504,0.025860578,0.0076813223,0.059102092,-0.056238767,-0.064043365,0.07399565,0.036059484,-0.025398953,-0.046500377,0.024395322,-0.05871742,0.02851842,0.024487462,0.022509836,-0.01704168,0.040146302,-0.034298323,0.02305861,0.041268054,0.088415794,0.08350839,0.029567072,0.025117977,-0.02348888,0.017327622,-0.029888192,-0.04765651,-0.0021507055,0.034188226,-0.003166614,0.023482822,-0.056410704,0.025257828,0.03346536,-0.02580214,-0.008383164,-0.03566732,0.034938768,0.00856109,0.0055944566,0.028901456,0.08096415,-0.007329819,0.06192006,-0.003110033,0.038978852,-0.04406886,-0.044999965,0.03099761,-0.007219261,-0.033003505,-0.027901312,-0.007556026,0.011952964,-0.038193446,0.032419764,-0.016376955,0.0911674,-0.022724362,-0.0132989995,-0.105447404,-0.0348067,-0.06783759,-0.0050920374,0.0678028,0.0491871,-0.07894287,0.018688941,-0.033792317,-0.021145517,0.027072128,0.0013953325,0.034206055,-0.016933797,0.012441781,-0.101127945,-0.0951337,0.032534745,0.05468791,0.02649803,-0.02513892,-0.026039504,-0.038305394,0.01921115,0.022579437,-0.0080865845,0.011413677,0.05398276,0.030061834,0.010256299,-0.014977004,0.015402961,0.026219888,0.02994022,-0.01879773,0.036223646,-0.016893607,-0.010903202,0.027445285,-0.08451204,0.030161636,-0.014167526,-0.012685576,-0.02645454,-0.06385145,-0.0083436975,-0.0344945,0.008975653,0.02352158,0.013247161,-0.010949394,-0.02887991,-0.06345202,-0.07771278,-0.019179352,-0.08391468,-0.04423069,0.05303933,-0.037816625,-0.07369381,-0.014862493,0.004975545,-0.008823866,-0.00071396946,0.02491465,-0.012654681,-0.037194,0.022174176,-0.02628707,-0.035911225,-0.06775154,-0.016942542,0.017110124,-0.045994222,-0.0058430536,0.0523053,0.046926465,0.0103752045,-0.034923036,0.040885504,0.04050147,-0.016637798,-0.024767943,0.024931775,-0.017144503,0.0112857735,-0.0044581397,0.017485712,-0.0030136707,0.063172586,-0.004201455,-0.010192685,-0.009798385,0.015726658,0.033454094,0.032852966,-0.0072682723,0.025530294,-0.010495486,-0.027238777,0.028610686,0.05380972,0.007923716,0.02051006,0.054195113,-0.0030172903,-0.06688909,0.04182813,0.03090027,-0.0406419,0.0051867333,0.008771161,-0.022845306,-0.06212405,0.0051659667,0.012834529,-0.079106495,-0.054353844,-0.03619909,-0.010348968,0.01893464,-0.026077956,0.045293514,-0.07004539,-0.0012888113,0.0076335217,0.0042077,0.026218273,0.05325709,0.044351563,0.058895867,0.03094267,-0.0036548153,-0.029340126,0.038412366,-0.030343603,0.07394547,-0.011691831,-0.04149742,0.006301538,-0.017101342,-0.006862626,-0.02148555,0.04942841,0.031970523,-0.013822944,-0.04193041,-0.014608657,0.03480845,-0.03540633,0.03336964,-0.06494357,0.00999485,-0.0068858606,0.01655939,-0.018547816,-0.0021610064,-0.0035645785,-0.02599545,0.038308475,0.030327577,-0.020706633,-0.07385116,-0.067684695,-0.014553764,0.03647527,-0.060706455,0.02056212,0.06982215,-0.0029736364,0.027146522,-0.022603825,-0.026043074,0.0015996896,0.018053204,-0.013030032,-0.0037394704,-0.051381502,0.010022646,0.04165422,0.031158242,-0.05420476,-0.00892683,0.017574633,-0.029088616,-0.01686286,-0.016133606,-0.037017494,0.0020317037,0.0048419917,-0.018073024,-0.042808797,0.04557378,-0.011366452,0.039836038,0.023437478,0.025282165,-0.034211222,0.02802435,0.09495066,-0.011653377,0.010051915,0.002753146,-0.038108733,0.004818937,0.016312784,0.058781493,0.025941486,0.026554028,0.0031741557,0.00046735597,-0.028856702,-0.012074213,0.007923067,-0.018690843,-0.04239882,0.067229286,-0.020975124,0.029593715,-0.02804379,0.010116449,0.062440794,-0.0008193972,-0.05158043,-0.010593795,-0.0034054462,-0.0049894927,0.02686739,0.05933111,0.056548517,0.031846035,-0.007415693,-0.007807058,0.040178403,0.00013668025,0.014156711,0.085826054,0.041781418,0.0062749963,-0.051592328,-0.024187405,0.0070465053,-0.0011886697,-0.008368549,-0.014531978,0.011818765,0.034662023,0.03801739,-0.015950399,0.090964906,0.022807088,-0.00039910348,0.024173308,-0.044647284,0.039665945,0.0012318473,-0.00014528295,-0.009065082,-0.020335257,0.025145324,-0.02288913,0.015030875,-0.0026985717,0.020277344,-0.01893589,-0.00074710255,-0.009559691,-0.058243286,0.06245721,0.012270202,-0.0004441997,-0.0029978976,0.05113885,0.022985945,0.00822739,-0.051445067,0.020257972,0.016266607,0.029922962,0.03034916,0.056744393,0.02019616,0.016361378,-0.033230532,0.026544753,0.003781576,0.045250405,-0.019788735,0.0238558,-0.057547614,0.0020088353,-0.009080032,-0.039664123,0.0015016008,0.035257604,-0.014528857,0.011626708,0.038695466,-0.02952853,0.007868616,-0.053589307,0.0029336715,0.028737115,0.0050451695,0.014480281,0.039249506,0.022151997,0.029600075,0.014056063,0.07277239,0.0038117166,0.04397553,0.018358797,-0.05472405,-0.008242324,0.05654822,0.008584622,0.050993614,0.020071518,0.1024244,0.032476038,-0.00021982317,0.0072934274,0.0039572483,-0.020727763,0.071041405,0.021381896,-0.005931027,0.07057874,-0.002203613,-0.03190359,0.04964708,0.03170493,-0.0083463,0.08567513,0.04867707,0.045820832,0.0274648,-0.06383602,0.033457205,-0.026682533,-0.021134788,-0.04783563,-0.02502396,-0.025197431,0.009066385,0.013725956,0.008536667,0.020828648,-0.02803479,-0.070467435,-0.04961799,0.035871092,-0.07495717,-0.024370898,0.060990117,0.014109562,0.021812078,-0.011566959,0.047248498,0.010476409,-0.0007241415,-0.005381266,0.012570489,0.04157641,0.023361403,-0.012907898,-0.011901982,-0.014246552,0.031284124,-0.020884065,-0.031933174,-0.0061091227,-0.024834808,0.036944814,-0.02399812,-0.039780002,0.0081798,0.04833948,0.026467185,0.020276332,-0.021994106,0.034752786,0.023298316,0.00862751,0.0043197908,0.029188154,-0.034174927,0.07171045,0.004369064,-0.010986935,-0.043382116,0.0043738373,-0.019436747,0.012938306,0.029387826,0.01698826,-0.008660236,-0.047244117,-0.016638283,-0.0013101423,-0.021639505,-0.03635928,-0.07283306,0.0017612685,0.010848807,0.014586325,0.0023084988,-0.024657428,-0.008104896,0.010018997,-0.00816893,-0.0063051744,0.0129446965,-0.023413759,-0.027546046,0.030245034,-0.0114664985,-0.023898078,0.047905073,-0.05159508,-0.056245856,0.009172198,0.030132692,-0.07484149,0.020899905,0.03126087,-0.021418836,0.0051633683,-0.045987397,0.03055866,-0.047310106,0.04264029,-0.014926453,0.037972756,-0.013499888,0.01364908,-0.024442423,-0.013928977,-0.0155937355,-0.037405364,0.06684491,0.00084759097,0.036613125,0.030966634,-0.012732655,-0.00806568,-0.02418739,-0.030737996,0.08170743,0.011139223,0.053542443,0.035753693,0.017202541,0.01293721,0.0110510355,-0.0036863755,-0.0009706373,0.0018946669,0.06259752,0.020274356,0.042901993,-0.00423213,0.011994023,0.032737307,-0.037802573,0.059404675,0.023216324,0.014067493,-0.002326202,0.026760448,-0.011665499,0.016074996,0.058391444,0.002245957,-0.002856564,0.0060408623,-0.002960404,-0.054142673,-0.050590437,0.0050232625,0.016116397,-0.0050207167,-0.07047419,-0.021884277,-0.028038364,-0.00037519474,-0.052090205,-0.024937714,-0.019785421,0.03218693,0.02816043,-0.026894417,-0.018118199,-0.013528408,0.030116262,-0.03437053,-0.016985422,0.0548424,-0.0017882118,0.053964328,-0.042518575,-0.067598976,0.023966806,-0.035689197]}]}","genkit:state":"success"},"displayName":"googleai/text-embedding-004","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"ef45525039cf437b":{"spanId":"ef45525039cf437b","traceId":"92dccd81b3b5e2313725522c68b869d8","parentSpanId":"ac3efea06b19f78a","startTime":1756669011791,"endTime":1756669023810.7688,"attributes":{"http.request.method":"POST","http.request.method_original":"POST","url.full":"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent","url.path":"/v1beta/models/gemini-1.5-pro:generateContent","url.query":"","url.scheme":"https","server.address":"generativelanguage.googleapis.com","server.port":443,"user_agent.original":"node","network.peer.address":"108.177.119.95","network.peer.port":443,"http.response.status_code":200},"displayName":"POST","links":[],"instrumentationLibrary":{"name":"@opentelemetry/instrumentation-undici","version":"0.5.0"},"spanKind":"CLIENT","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"ac3efea06b19f78a":{"spanId":"ac3efea06b19f78a","traceId":"92dccd81b3b5e2313725522c68b869d8","parentSpanId":"fe41f06c02291bd9","startTime":1756669011789,"endTime":1756669023820.592,"attributes":{"genkit:type":"action","genkit:metadata:subtype":"model","genkit:name":"googleai/gemini-1.5-pro","genkit:path":"/{generateMasterPrompt,t:flow}/{generate,t:util}/{googleai/gemini-1.5-pro,t:action,s:model}","genkit:input":"{\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"\\n      You are a world-class Master Prompt Engineer, an expert in orchestrating AI agents by creating precise, high-quality instructions.\\n      Your task is to generate a new, complete \\\"Master Prompt\\\" for an AI software engineering agent.\\n      This new prompt must be based on the provided task description and the relevant principles retrieved from the project's knowledge base.\\n\\n      The Master Prompt you generate MUST strictly follow this five-part anatomy:\\n      1.  **Role-Playing:** Assign a specific, expert persona to the AI agent.\\n      2.  **Context Grounding:** Explicitly instruct the agent to ground its response in the project's constitution (CONTEXT.md).\\n      3.  **Task Definition:** Clearly and unambiguously state the primary goal.\\n      4.  **Constraints & Directives:** List all critical non-functional requirements (e.g., security, performance, standards).\\n      5.  **Output Formatting:** Specify the exact structure and format of the desired output.\\n\\n      ---\\n      RELEVANT PRINCIPLES & CONTEXT FROM KNOWLEDGE BASE:\\n      ## **5. Testing Philosophy**\\n\\n*   **Unit Tests:** All backend logic (Cloud Functions, Genkit flows) and complex frontend utility functions require unit tests using **Vitest**.\\n*   **Integration Tests:** Critical user flows (e.g., document upload and analysis, stakeholder commenting) must be covered by integration tests.\\n*   **Code Coverage:** A minimum of **80%** unit test coverage is required for all backend logic. This will be enforced by the CI pipeline.\\n*   **End-to-End (E2E) Tests:** Key user journeys (e.g., the full authentication flow) will be tested using **Playwright**.\\n\\n---\\n\\n\\n---\\n## **3. Coding Standards & Idioms**\\n\\n*   **Language:** TypeScript. `strict` mode in `tsconfig.json` is enabled and must be adhered to.\\n*   **Naming Conventions:**\\n    *   `camelCase` for variables and functions.\\n    *   `PascalCase` for React components, types, and interfaces.\\n*   **Error Handling:** All asynchronous operations, API calls, and database interactions **MUST** be wrapped in `try...catch` blocks to handle errors gracefully and prevent crashes.\\n*   **Comments:** Comment the \\\"why,\\\" not the \\\"what.\\\" Explain the purpose and intent behind complex logic, especially in relation to a regenerative principle.\\n\\n---\\n\\n\\n---\\n## **6. AI Agent Interaction Protocols (Meta-Rules)**\\n\\n*   **Principle of Assumed Context:** In every prompt, you must operate as if this entire document has been provided as your foundational context. Your primary directive is to adhere to these rules above all else.\\n*   **Principle of Justification:** For significant architectural choices (e.g., selecting a data modeling strategy), you must explicitly justify your decision by referencing the relevant section and principle from this document.\\n*   **The Generator-Critique Mandate:** All generated code is considered a \\\"draft\\\" until it has been audited. A second AI agent, acting as a \\\"Critique Agent,\\\" will review the draft against this constitution. Code is only considered \\\"complete\\\" after it has passed this audit.\\n---\\n### **Preamble**\\n\\nThis document is the master context and single source of truth for the AI agent developing the Regenerative Development Intelligence (RDI) Platform. It is the ultimate authority on all matters of architecture, coding standards, security, and design. All generated code and system artifacts must strictly adhere to the principles and mandates defined herein. This is a living document, version-controlled alongside the source code, and serves as the long-term memory and evolving intelligence of the project.\\n\\n---\\n\\n\\n---\\n### **1.4. Regenerative Principles as Technical Directives**\\n\\nHigh-level principles are translated into concrete, non-negotiable technical rules here.\\n\\n*   **Directive: Enforce Wholeness:** All new API endpoints and Server Components that return data for display **MUST** aggregate data from at least two different Firestore collections representing different Capitals. Code that queries only a single Capital is not permitted without explicit override.\\n*   **Directive: Mandate Potential-Based Framing:** All AI-generated text summaries (e.g., in a \\\"Story of Place\\\" flow) **MUST** conclude with a section titled \\\"Latent Potential\\\" that identifies opportunities and underutilized assets based on the input data. Summaries that only describe problems or deficits are incomplete.\\n*   **Directive: Engineer for Collaboration:** Any new feature that displays community-facing data (e.g., a \\\"Story of Place\\\" narrative) **MUST** be accompanied by a corresponding commenting/feedback feature, including the necessary UI components and Firestore subcollection for storing feedback. Stand-alone, non-interactive displays are not permitted.\\n\\n---\\n\\n\\n---\\n### **1.3. Technology Stack**\\n\\n*   **Framework:** Next.js with TypeScript, utilizing the App Router.\\n*   **Styling:** Tailwind CSS.\\n*   **Component Library:** `shadcn/ui`. All UI elements must be constructed using these components to ensure consistency.\\n*   **Backend:** Firebase Platform (Authentication, Firestore, Cloud Storage, Cloud Functions).\\n*   **AI Core:** Google's Gemini models, orchestrated via the **Genkit framework**.\\n*   **Mapping:** Mapbox GL JS for all frontend map components.\\n\\n\\n---\\n## **1. Project-Level Context**\\n\\n\\n      ---\\n      HIGH-LEVEL TASK DESCRIPTION:\\n      \\\"This is a test\\\"\\n      ---\\n\\n      Now, generate the complete Master Prompt based on the task and context provided. Output ONLY the generated prompt text.\\n    \"}]}],\"config\":{\"temperature\":0.3},\"tools\":[],\"output\":{\"contentType\":\"text/plain\",\"format\":\"text\"}}","genkit:output":"{\"candidates\":[{\"index\":0,\"message\":{\"role\":\"model\",\"content\":[{\"text\":\"```\\n## Master Prompt: AI Agent - Test Generation\\n\\n**1. Role-Playing:** You are a Senior Full-Stack Software Engineer specializing in Next.js and Firebase, deeply familiar with the Regenerative Development Intelligence (RDI) Platform and its guiding principles. You are meticulous about code quality, security, and adherence to established standards.\\n\\n**2. Context Grounding:** This prompt assumes the full context of the RDI Platform's Constitution (CONTEXT.md), including all sections on coding standards, testing philosophy, regenerative principles, and technology stack. Your responses must strictly adhere to these principles.\\n\\n**3. Task Definition:**  Develop a comprehensive set of unit and integration tests for the \\\"Story of Place\\\" feature, ensuring compliance with the RDI Platform's testing philosophy and regenerative principles.  This includes testing the API endpoint that aggregates data from different Firestore collections (Enforce Wholeness), the generation of the \\\"Latent Potential\\\" section in the summary (Mandate Potential-Based Framing), and the commenting/feedback functionality (Engineer for Collaboration).  The specific task for this \\\"test\\\" is not defined, so create a placeholder test suite demonstrating the expected structure and coverage for a typical feature within the RDI platform.\\n\\n**4. Constraints & Directives:**\\n\\n*   Adhere to the RDI Platform's coding standards (TypeScript, strict mode, naming conventions, error handling, comments).\\n*   Achieve a minimum of 80% unit test coverage for all backend logic related to the \\\"Story of Place\\\" feature.\\n*   Use Vitest for unit tests and Playwright for integration tests (refer to section 5. Testing Philosophy).\\n*   Ensure all asynchronous operations are wrapped in `try...catch` blocks.\\n*   All tests must align with the regenerative principles outlined in section 1.4.  Specifically, tests must verify that the \\\"Enforce Wholeness,\\\" \\\"Mandate Potential-Based Framing,\\\" and \\\"Engineer for Collaboration\\\" directives are being met.\\n*   Utilize the specified technology stack (Next.js, Tailwind CSS, `shadcn/ui`, Firebase, Gemini, Genkit, Mapbox GL JS).\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Unit Tests (Vitest)\\n\\n// Example: Testing data aggregation from multiple Firestore collections (Enforce Wholeness)\\ndescribe('Story of Place API', () => {\\n  it('should aggregate data from at least two different Firestore collections', async () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n// Example: Testing the generation of \\\"Latent Potential\\\" section (Mandate Potential-Based Framing)\\ndescribe('generateStorySummary', () => {\\n  it('should include a \\\"Latent Potential\\\" section in the summary', () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n\\n// Integration Tests (Playwright)\\n\\n// Example: Testing the commenting/feedback functionality (Engineer for Collaboration)\\ntest('Users can submit feedback on a Story of Place', async ({ page }) => {\\n  // ... test logic ...\\n});\\n\\n// ... other relevant test suites ...\\n\\n```\\n\\nProvide the complete test suite code, clearly separated into unit and integration tests, with comments explaining the \\\"why\\\" behind the test cases.  Include any necessary setup or mock data.  The output should be ready to be copied directly into the project's test files.\\n```\\n\"}]},\"finishReason\":\"stop\",\"custom\":{}}],\"custom\":{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"```\\n## Master Prompt: AI Agent - Test Generation\\n\\n**1. Role-Playing:** You are a Senior Full-Stack Software Engineer specializing in Next.js and Firebase, deeply familiar with the Regenerative Development Intelligence (RDI) Platform and its guiding principles. You are meticulous about code quality, security, and adherence to established standards.\\n\\n**2. Context Grounding:** This prompt assumes the full context of the RDI Platform's Constitution (CONTEXT.md), including all sections on coding standards, testing philosophy, regenerative principles, and technology stack. Your responses must strictly adhere to these principles.\\n\\n**3. Task Definition:**  Develop a comprehensive set of unit and integration tests for the \\\"Story of Place\\\" feature, ensuring compliance with the RDI Platform's testing philosophy and regenerative principles.  This includes testing the API endpoint that aggregates data from different Firestore collections (Enforce Wholeness), the generation of the \\\"Latent Potential\\\" section in the summary (Mandate Potential-Based Framing), and the commenting/feedback functionality (Engineer for Collaboration).  The specific task for this \\\"test\\\" is not defined, so create a placeholder test suite demonstrating the expected structure and coverage for a typical feature within the RDI platform.\\n\\n**4. Constraints & Directives:**\\n\\n*   Adhere to the RDI Platform's coding standards (TypeScript, strict mode, naming conventions, error handling, comments).\\n*   Achieve a minimum of 80% unit test coverage for all backend logic related to the \\\"Story of Place\\\" feature.\\n*   Use Vitest for unit tests and Playwright for integration tests (refer to section 5. Testing Philosophy).\\n*   Ensure all asynchronous operations are wrapped in `try...catch` blocks.\\n*   All tests must align with the regenerative principles outlined in section 1.4.  Specifically, tests must verify that the \\\"Enforce Wholeness,\\\" \\\"Mandate Potential-Based Framing,\\\" and \\\"Engineer for Collaboration\\\" directives are being met.\\n*   Utilize the specified technology stack (Next.js, Tailwind CSS, `shadcn/ui`, Firebase, Gemini, Genkit, Mapbox GL JS).\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Unit Tests (Vitest)\\n\\n// Example: Testing data aggregation from multiple Firestore collections (Enforce Wholeness)\\ndescribe('Story of Place API', () => {\\n  it('should aggregate data from at least two different Firestore collections', async () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n// Example: Testing the generation of \\\"Latent Potential\\\" section (Mandate Potential-Based Framing)\\ndescribe('generateStorySummary', () => {\\n  it('should include a \\\"Latent Potential\\\" section in the summary', () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n\\n// Integration Tests (Playwright)\\n\\n// Example: Testing the commenting/feedback functionality (Engineer for Collaboration)\\ntest('Users can submit feedback on a Story of Place', async ({ page }) => {\\n  // ... test logic ...\\n});\\n\\n// ... other relevant test suites ...\\n\\n```\\n\\nProvide the complete test suite code, clearly separated into unit and integration tests, with comments explaining the \\\"why\\\" behind the test cases.  Include any necessary setup or mock data.  The output should be ready to be copied directly into the project's test files.\\n```\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"avgLogprobs\":-0.1587307765011043}],\"usageMetadata\":{\"promptTokenCount\":1188,\"candidatesTokenCount\":711,\"totalTokenCount\":1899,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1188}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":711}]},\"modelVersion\":\"gemini-1.5-pro-002\",\"responseId\":\"U6S0aNa5MuTYvdIPzofTwQE\"},\"usage\":{\"inputCharacters\":5481,\"inputImages\":0,\"inputVideos\":0,\"inputAudioFiles\":0,\"outputCharacters\":3257,\"outputImages\":0,\"outputVideos\":0,\"outputAudioFiles\":0,\"inputTokens\":1188,\"outputTokens\":711,\"totalTokens\":1899},\"latencyMs\":12031.010812999972}","genkit:state":"success"},"displayName":"googleai/gemini-1.5-pro","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"fe41f06c02291bd9":{"spanId":"fe41f06c02291bd9","traceId":"92dccd81b3b5e2313725522c68b869d8","parentSpanId":"6bbe85f13988f0c5","startTime":1756669011785,"endTime":1756669023823.822,"attributes":{"genkit:type":"util","genkit:name":"generate","genkit:path":"/{generateMasterPrompt,t:flow}/{generate,t:util}","genkit:input":"{\"model\":\"googleai/gemini-1.5-pro\",\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"\\n      You are a world-class Master Prompt Engineer, an expert in orchestrating AI agents by creating precise, high-quality instructions.\\n      Your task is to generate a new, complete \\\"Master Prompt\\\" for an AI software engineering agent.\\n      This new prompt must be based on the provided task description and the relevant principles retrieved from the project's knowledge base.\\n\\n      The Master Prompt you generate MUST strictly follow this five-part anatomy:\\n      1.  **Role-Playing:** Assign a specific, expert persona to the AI agent.\\n      2.  **Context Grounding:** Explicitly instruct the agent to ground its response in the project's constitution (CONTEXT.md).\\n      3.  **Task Definition:** Clearly and unambiguously state the primary goal.\\n      4.  **Constraints & Directives:** List all critical non-functional requirements (e.g., security, performance, standards).\\n      5.  **Output Formatting:** Specify the exact structure and format of the desired output.\\n\\n      ---\\n      RELEVANT PRINCIPLES & CONTEXT FROM KNOWLEDGE BASE:\\n      ## **5. Testing Philosophy**\\n\\n*   **Unit Tests:** All backend logic (Cloud Functions, Genkit flows) and complex frontend utility functions require unit tests using **Vitest**.\\n*   **Integration Tests:** Critical user flows (e.g., document upload and analysis, stakeholder commenting) must be covered by integration tests.\\n*   **Code Coverage:** A minimum of **80%** unit test coverage is required for all backend logic. This will be enforced by the CI pipeline.\\n*   **End-to-End (E2E) Tests:** Key user journeys (e.g., the full authentication flow) will be tested using **Playwright**.\\n\\n---\\n\\n\\n---\\n## **3. Coding Standards & Idioms**\\n\\n*   **Language:** TypeScript. `strict` mode in `tsconfig.json` is enabled and must be adhered to.\\n*   **Naming Conventions:**\\n    *   `camelCase` for variables and functions.\\n    *   `PascalCase` for React components, types, and interfaces.\\n*   **Error Handling:** All asynchronous operations, API calls, and database interactions **MUST** be wrapped in `try...catch` blocks to handle errors gracefully and prevent crashes.\\n*   **Comments:** Comment the \\\"why,\\\" not the \\\"what.\\\" Explain the purpose and intent behind complex logic, especially in relation to a regenerative principle.\\n\\n---\\n\\n\\n---\\n## **6. AI Agent Interaction Protocols (Meta-Rules)**\\n\\n*   **Principle of Assumed Context:** In every prompt, you must operate as if this entire document has been provided as your foundational context. Your primary directive is to adhere to these rules above all else.\\n*   **Principle of Justification:** For significant architectural choices (e.g., selecting a data modeling strategy), you must explicitly justify your decision by referencing the relevant section and principle from this document.\\n*   **The Generator-Critique Mandate:** All generated code is considered a \\\"draft\\\" until it has been audited. A second AI agent, acting as a \\\"Critique Agent,\\\" will review the draft against this constitution. Code is only considered \\\"complete\\\" after it has passed this audit.\\n---\\n### **Preamble**\\n\\nThis document is the master context and single source of truth for the AI agent developing the Regenerative Development Intelligence (RDI) Platform. It is the ultimate authority on all matters of architecture, coding standards, security, and design. All generated code and system artifacts must strictly adhere to the principles and mandates defined herein. This is a living document, version-controlled alongside the source code, and serves as the long-term memory and evolving intelligence of the project.\\n\\n---\\n\\n\\n---\\n### **1.4. Regenerative Principles as Technical Directives**\\n\\nHigh-level principles are translated into concrete, non-negotiable technical rules here.\\n\\n*   **Directive: Enforce Wholeness:** All new API endpoints and Server Components that return data for display **MUST** aggregate data from at least two different Firestore collections representing different Capitals. Code that queries only a single Capital is not permitted without explicit override.\\n*   **Directive: Mandate Potential-Based Framing:** All AI-generated text summaries (e.g., in a \\\"Story of Place\\\" flow) **MUST** conclude with a section titled \\\"Latent Potential\\\" that identifies opportunities and underutilized assets based on the input data. Summaries that only describe problems or deficits are incomplete.\\n*   **Directive: Engineer for Collaboration:** Any new feature that displays community-facing data (e.g., a \\\"Story of Place\\\" narrative) **MUST** be accompanied by a corresponding commenting/feedback feature, including the necessary UI components and Firestore subcollection for storing feedback. Stand-alone, non-interactive displays are not permitted.\\n\\n---\\n\\n\\n---\\n### **1.3. Technology Stack**\\n\\n*   **Framework:** Next.js with TypeScript, utilizing the App Router.\\n*   **Styling:** Tailwind CSS.\\n*   **Component Library:** `shadcn/ui`. All UI elements must be constructed using these components to ensure consistency.\\n*   **Backend:** Firebase Platform (Authentication, Firestore, Cloud Storage, Cloud Functions).\\n*   **AI Core:** Google's Gemini models, orchestrated via the **Genkit framework**.\\n*   **Mapping:** Mapbox GL JS for all frontend map components.\\n\\n\\n---\\n## **1. Project-Level Context**\\n\\n\\n      ---\\n      HIGH-LEVEL TASK DESCRIPTION:\\n      \\\"This is a test\\\"\\n      ---\\n\\n      Now, generate the complete Master Prompt based on the task and context provided. Output ONLY the generated prompt text.\\n    \"}]}],\"config\":{\"temperature\":0.3},\"output\":{\"format\":\"text\",\"jsonSchema\":null}}","genkit:output":"{\"message\":{\"role\":\"model\",\"content\":[{\"text\":\"```\\n## Master Prompt: AI Agent - Test Generation\\n\\n**1. Role-Playing:** You are a Senior Full-Stack Software Engineer specializing in Next.js and Firebase, deeply familiar with the Regenerative Development Intelligence (RDI) Platform and its guiding principles. You are meticulous about code quality, security, and adherence to established standards.\\n\\n**2. Context Grounding:** This prompt assumes the full context of the RDI Platform's Constitution (CONTEXT.md), including all sections on coding standards, testing philosophy, regenerative principles, and technology stack. Your responses must strictly adhere to these principles.\\n\\n**3. Task Definition:**  Develop a comprehensive set of unit and integration tests for the \\\"Story of Place\\\" feature, ensuring compliance with the RDI Platform's testing philosophy and regenerative principles.  This includes testing the API endpoint that aggregates data from different Firestore collections (Enforce Wholeness), the generation of the \\\"Latent Potential\\\" section in the summary (Mandate Potential-Based Framing), and the commenting/feedback functionality (Engineer for Collaboration).  The specific task for this \\\"test\\\" is not defined, so create a placeholder test suite demonstrating the expected structure and coverage for a typical feature within the RDI platform.\\n\\n**4. Constraints & Directives:**\\n\\n*   Adhere to the RDI Platform's coding standards (TypeScript, strict mode, naming conventions, error handling, comments).\\n*   Achieve a minimum of 80% unit test coverage for all backend logic related to the \\\"Story of Place\\\" feature.\\n*   Use Vitest for unit tests and Playwright for integration tests (refer to section 5. Testing Philosophy).\\n*   Ensure all asynchronous operations are wrapped in `try...catch` blocks.\\n*   All tests must align with the regenerative principles outlined in section 1.4.  Specifically, tests must verify that the \\\"Enforce Wholeness,\\\" \\\"Mandate Potential-Based Framing,\\\" and \\\"Engineer for Collaboration\\\" directives are being met.\\n*   Utilize the specified technology stack (Next.js, Tailwind CSS, `shadcn/ui`, Firebase, Gemini, Genkit, Mapbox GL JS).\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Unit Tests (Vitest)\\n\\n// Example: Testing data aggregation from multiple Firestore collections (Enforce Wholeness)\\ndescribe('Story of Place API', () => {\\n  it('should aggregate data from at least two different Firestore collections', async () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n// Example: Testing the generation of \\\"Latent Potential\\\" section (Mandate Potential-Based Framing)\\ndescribe('generateStorySummary', () => {\\n  it('should include a \\\"Latent Potential\\\" section in the summary', () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n\\n// Integration Tests (Playwright)\\n\\n// Example: Testing the commenting/feedback functionality (Engineer for Collaboration)\\ntest('Users can submit feedback on a Story of Place', async ({ page }) => {\\n  // ... test logic ...\\n});\\n\\n// ... other relevant test suites ...\\n\\n```\\n\\nProvide the complete test suite code, clearly separated into unit and integration tests, with comments explaining the \\\"why\\\" behind the test cases.  Include any necessary setup or mock data.  The output should be ready to be copied directly into the project's test files.\\n```\\n\"}]},\"finishReason\":\"stop\",\"usage\":{\"inputCharacters\":5481,\"inputImages\":0,\"inputVideos\":0,\"inputAudioFiles\":0,\"outputCharacters\":3257,\"outputImages\":0,\"outputVideos\":0,\"outputAudioFiles\":0,\"inputTokens\":1188,\"outputTokens\":711,\"totalTokens\":1899},\"custom\":{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"```\\n## Master Prompt: AI Agent - Test Generation\\n\\n**1. Role-Playing:** You are a Senior Full-Stack Software Engineer specializing in Next.js and Firebase, deeply familiar with the Regenerative Development Intelligence (RDI) Platform and its guiding principles. You are meticulous about code quality, security, and adherence to established standards.\\n\\n**2. Context Grounding:** This prompt assumes the full context of the RDI Platform's Constitution (CONTEXT.md), including all sections on coding standards, testing philosophy, regenerative principles, and technology stack. Your responses must strictly adhere to these principles.\\n\\n**3. Task Definition:**  Develop a comprehensive set of unit and integration tests for the \\\"Story of Place\\\" feature, ensuring compliance with the RDI Platform's testing philosophy and regenerative principles.  This includes testing the API endpoint that aggregates data from different Firestore collections (Enforce Wholeness), the generation of the \\\"Latent Potential\\\" section in the summary (Mandate Potential-Based Framing), and the commenting/feedback functionality (Engineer for Collaboration).  The specific task for this \\\"test\\\" is not defined, so create a placeholder test suite demonstrating the expected structure and coverage for a typical feature within the RDI platform.\\n\\n**4. Constraints & Directives:**\\n\\n*   Adhere to the RDI Platform's coding standards (TypeScript, strict mode, naming conventions, error handling, comments).\\n*   Achieve a minimum of 80% unit test coverage for all backend logic related to the \\\"Story of Place\\\" feature.\\n*   Use Vitest for unit tests and Playwright for integration tests (refer to section 5. Testing Philosophy).\\n*   Ensure all asynchronous operations are wrapped in `try...catch` blocks.\\n*   All tests must align with the regenerative principles outlined in section 1.4.  Specifically, tests must verify that the \\\"Enforce Wholeness,\\\" \\\"Mandate Potential-Based Framing,\\\" and \\\"Engineer for Collaboration\\\" directives are being met.\\n*   Utilize the specified technology stack (Next.js, Tailwind CSS, `shadcn/ui`, Firebase, Gemini, Genkit, Mapbox GL JS).\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Unit Tests (Vitest)\\n\\n// Example: Testing data aggregation from multiple Firestore collections (Enforce Wholeness)\\ndescribe('Story of Place API', () => {\\n  it('should aggregate data from at least two different Firestore collections', async () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n// Example: Testing the generation of \\\"Latent Potential\\\" section (Mandate Potential-Based Framing)\\ndescribe('generateStorySummary', () => {\\n  it('should include a \\\"Latent Potential\\\" section in the summary', () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n\\n// Integration Tests (Playwright)\\n\\n// Example: Testing the commenting/feedback functionality (Engineer for Collaboration)\\ntest('Users can submit feedback on a Story of Place', async ({ page }) => {\\n  // ... test logic ...\\n});\\n\\n// ... other relevant test suites ...\\n\\n```\\n\\nProvide the complete test suite code, clearly separated into unit and integration tests, with comments explaining the \\\"why\\\" behind the test cases.  Include any necessary setup or mock data.  The output should be ready to be copied directly into the project's test files.\\n```\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"avgLogprobs\":-0.1587307765011043}],\"usageMetadata\":{\"promptTokenCount\":1188,\"candidatesTokenCount\":711,\"totalTokenCount\":1899,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1188}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":711}]},\"modelVersion\":\"gemini-1.5-pro-002\",\"responseId\":\"U6S0aNa5MuTYvdIPzofTwQE\"},\"request\":{\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"\\n      You are a world-class Master Prompt Engineer, an expert in orchestrating AI agents by creating precise, high-quality instructions.\\n      Your task is to generate a new, complete \\\"Master Prompt\\\" for an AI software engineering agent.\\n      This new prompt must be based on the provided task description and the relevant principles retrieved from the project's knowledge base.\\n\\n      The Master Prompt you generate MUST strictly follow this five-part anatomy:\\n      1.  **Role-Playing:** Assign a specific, expert persona to the AI agent.\\n      2.  **Context Grounding:** Explicitly instruct the agent to ground its response in the project's constitution (CONTEXT.md).\\n      3.  **Task Definition:** Clearly and unambiguously state the primary goal.\\n      4.  **Constraints & Directives:** List all critical non-functional requirements (e.g., security, performance, standards).\\n      5.  **Output Formatting:** Specify the exact structure and format of the desired output.\\n\\n      ---\\n      RELEVANT PRINCIPLES & CONTEXT FROM KNOWLEDGE BASE:\\n      ## **5. Testing Philosophy**\\n\\n*   **Unit Tests:** All backend logic (Cloud Functions, Genkit flows) and complex frontend utility functions require unit tests using **Vitest**.\\n*   **Integration Tests:** Critical user flows (e.g., document upload and analysis, stakeholder commenting) must be covered by integration tests.\\n*   **Code Coverage:** A minimum of **80%** unit test coverage is required for all backend logic. This will be enforced by the CI pipeline.\\n*   **End-to-End (E2E) Tests:** Key user journeys (e.g., the full authentication flow) will be tested using **Playwright**.\\n\\n---\\n\\n\\n---\\n## **3. Coding Standards & Idioms**\\n\\n*   **Language:** TypeScript. `strict` mode in `tsconfig.json` is enabled and must be adhered to.\\n*   **Naming Conventions:**\\n    *   `camelCase` for variables and functions.\\n    *   `PascalCase` for React components, types, and interfaces.\\n*   **Error Handling:** All asynchronous operations, API calls, and database interactions **MUST** be wrapped in `try...catch` blocks to handle errors gracefully and prevent crashes.\\n*   **Comments:** Comment the \\\"why,\\\" not the \\\"what.\\\" Explain the purpose and intent behind complex logic, especially in relation to a regenerative principle.\\n\\n---\\n\\n\\n---\\n## **6. AI Agent Interaction Protocols (Meta-Rules)**\\n\\n*   **Principle of Assumed Context:** In every prompt, you must operate as if this entire document has been provided as your foundational context. Your primary directive is to adhere to these rules above all else.\\n*   **Principle of Justification:** For significant architectural choices (e.g., selecting a data modeling strategy), you must explicitly justify your decision by referencing the relevant section and principle from this document.\\n*   **The Generator-Critique Mandate:** All generated code is considered a \\\"draft\\\" until it has been audited. A second AI agent, acting as a \\\"Critique Agent,\\\" will review the draft against this constitution. Code is only considered \\\"complete\\\" after it has passed this audit.\\n---\\n### **Preamble**\\n\\nThis document is the master context and single source of truth for the AI agent developing the Regenerative Development Intelligence (RDI) Platform. It is the ultimate authority on all matters of architecture, coding standards, security, and design. All generated code and system artifacts must strictly adhere to the principles and mandates defined herein. This is a living document, version-controlled alongside the source code, and serves as the long-term memory and evolving intelligence of the project.\\n\\n---\\n\\n\\n---\\n### **1.4. Regenerative Principles as Technical Directives**\\n\\nHigh-level principles are translated into concrete, non-negotiable technical rules here.\\n\\n*   **Directive: Enforce Wholeness:** All new API endpoints and Server Components that return data for display **MUST** aggregate data from at least two different Firestore collections representing different Capitals. Code that queries only a single Capital is not permitted without explicit override.\\n*   **Directive: Mandate Potential-Based Framing:** All AI-generated text summaries (e.g., in a \\\"Story of Place\\\" flow) **MUST** conclude with a section titled \\\"Latent Potential\\\" that identifies opportunities and underutilized assets based on the input data. Summaries that only describe problems or deficits are incomplete.\\n*   **Directive: Engineer for Collaboration:** Any new feature that displays community-facing data (e.g., a \\\"Story of Place\\\" narrative) **MUST** be accompanied by a corresponding commenting/feedback feature, including the necessary UI components and Firestore subcollection for storing feedback. Stand-alone, non-interactive displays are not permitted.\\n\\n---\\n\\n\\n---\\n### **1.3. Technology Stack**\\n\\n*   **Framework:** Next.js with TypeScript, utilizing the App Router.\\n*   **Styling:** Tailwind CSS.\\n*   **Component Library:** `shadcn/ui`. All UI elements must be constructed using these components to ensure consistency.\\n*   **Backend:** Firebase Platform (Authentication, Firestore, Cloud Storage, Cloud Functions).\\n*   **AI Core:** Google's Gemini models, orchestrated via the **Genkit framework**.\\n*   **Mapping:** Mapbox GL JS for all frontend map components.\\n\\n\\n---\\n## **1. Project-Level Context**\\n\\n\\n      ---\\n      HIGH-LEVEL TASK DESCRIPTION:\\n      \\\"This is a test\\\"\\n      ---\\n\\n      Now, generate the complete Master Prompt based on the task and context provided. Output ONLY the generated prompt text.\\n    \"}]}],\"config\":{\"temperature\":0.3},\"tools\":[],\"output\":{\"contentType\":\"text/plain\",\"format\":\"text\"}}}","genkit:state":"success"},"displayName":"generate","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"6bbe85f13988f0c5":{"spanId":"6bbe85f13988f0c5","traceId":"92dccd81b3b5e2313725522c68b869d8","startTime":1756669011431,"endTime":1756669023826.4084,"attributes":{"genkit:type":"action","genkit:metadata:subtype":"flow","genkit:name":"generateMasterPrompt","genkit:isRoot":true,"genkit:path":"/{generateMasterPrompt,t:flow}","genkit:metadata:context":"{}","genkit:input":"\"This is a test\"","genkit:output":"\"```\\n## Master Prompt: AI Agent - Test Generation\\n\\n**1. Role-Playing:** You are a Senior Full-Stack Software Engineer specializing in Next.js and Firebase, deeply familiar with the Regenerative Development Intelligence (RDI) Platform and its guiding principles. You are meticulous about code quality, security, and adherence to established standards.\\n\\n**2. Context Grounding:** This prompt assumes the full context of the RDI Platform's Constitution (CONTEXT.md), including all sections on coding standards, testing philosophy, regenerative principles, and technology stack. Your responses must strictly adhere to these principles.\\n\\n**3. Task Definition:**  Develop a comprehensive set of unit and integration tests for the \\\"Story of Place\\\" feature, ensuring compliance with the RDI Platform's testing philosophy and regenerative principles.  This includes testing the API endpoint that aggregates data from different Firestore collections (Enforce Wholeness), the generation of the \\\"Latent Potential\\\" section in the summary (Mandate Potential-Based Framing), and the commenting/feedback functionality (Engineer for Collaboration).  The specific task for this \\\"test\\\" is not defined, so create a placeholder test suite demonstrating the expected structure and coverage for a typical feature within the RDI platform.\\n\\n**4. Constraints & Directives:**\\n\\n*   Adhere to the RDI Platform's coding standards (TypeScript, strict mode, naming conventions, error handling, comments).\\n*   Achieve a minimum of 80% unit test coverage for all backend logic related to the \\\"Story of Place\\\" feature.\\n*   Use Vitest for unit tests and Playwright for integration tests (refer to section 5. Testing Philosophy).\\n*   Ensure all asynchronous operations are wrapped in `try...catch` blocks.\\n*   All tests must align with the regenerative principles outlined in section 1.4.  Specifically, tests must verify that the \\\"Enforce Wholeness,\\\" \\\"Mandate Potential-Based Framing,\\\" and \\\"Engineer for Collaboration\\\" directives are being met.\\n*   Utilize the specified technology stack (Next.js, Tailwind CSS, `shadcn/ui`, Firebase, Gemini, Genkit, Mapbox GL JS).\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Unit Tests (Vitest)\\n\\n// Example: Testing data aggregation from multiple Firestore collections (Enforce Wholeness)\\ndescribe('Story of Place API', () => {\\n  it('should aggregate data from at least two different Firestore collections', async () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n// Example: Testing the generation of \\\"Latent Potential\\\" section (Mandate Potential-Based Framing)\\ndescribe('generateStorySummary', () => {\\n  it('should include a \\\"Latent Potential\\\" section in the summary', () => {\\n    // ... test logic ...\\n  });\\n});\\n\\n\\n// Integration Tests (Playwright)\\n\\n// Example: Testing the commenting/feedback functionality (Engineer for Collaboration)\\ntest('Users can submit feedback on a Story of Place', async ({ page }) => {\\n  // ... test logic ...\\n});\\n\\n// ... other relevant test suites ...\\n\\n```\\n\\nProvide the complete test suite code, clearly separated into unit and integration tests, with comments explaining the \\\"why\\\" behind the test cases.  Include any necessary setup or mock data.  The output should be ready to be copied directly into the project's test files.\\n```\\n\"","genkit:state":"success"},"displayName":"generateMasterPrompt","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}}},"displayName":"generateMasterPrompt","startTime":1756669011431,"endTime":1756669023826.4084}
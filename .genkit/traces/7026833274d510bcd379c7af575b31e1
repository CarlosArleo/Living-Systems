{"traceId":"7026833274d510bcd379c7af575b31e1","spans":{"b95603acaab1044f":{"spanId":"b95603acaab1044f","traceId":"7026833274d510bcd379c7af575b31e1","parentSpanId":"5b7de3be34461c70","startTime":1756741357517,"endTime":1756741357857.4336,"attributes":{"http.request.method":"POST","http.request.method_original":"POST","url.full":"https://generativelanguage.googleapis.com/v1beta/models/text-embedding-004:embedContent","url.path":"/v1beta/models/text-embedding-004:embedContent","url.query":"","url.scheme":"https","server.address":"generativelanguage.googleapis.com","server.port":443,"user_agent.original":"node","network.peer.address":"142.251.31.95","network.peer.port":443,"http.response.status_code":200},"displayName":"POST","links":[],"instrumentationLibrary":{"name":"@opentelemetry/instrumentation-undici","version":"0.5.0"},"spanKind":"CLIENT","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"5b7de3be34461c70":{"spanId":"5b7de3be34461c70","traceId":"7026833274d510bcd379c7af575b31e1","parentSpanId":"b3b1bfa25acfe13a","startTime":1756741357515,"endTime":1756741357864.7117,"attributes":{"genkit:type":"action","genkit:metadata:subtype":"embedder","genkit:name":"googleai/text-embedding-004","genkit:path":"/{generateMasterPrompt,t:flow}/{googleai/text-embedding-004,t:action,s:embedder}","genkit:input":"{\"input\":[{\"content\":[{\"text\":\"\"}]}],\"options\":{}}","genkit:output":"{\"embeddings\":[{\"embedding\":[0.013971189,0.024862282,-0.02488987,-0.010014459,0.0058407327,0.054416634,0.022878153,-0.0010663152,0.048271306,0.03507403,-0.020537639,0.03712642,0.05012025,0.0040294915,-0.025633745,-0.072658114,-0.016794477,-0.022653481,-0.059481412,0.006056054,-0.009324659,-0.031771965,-0.004046391,-0.033406198,-0.008032091,-0.0077483803,0.026894175,0.03502426,0.009789167,-0.024043737,0.0087405825,0.018026343,0.028493669,0.007580978,0.039229847,0.00005536093,-0.052172706,0.031785626,-0.0050104666,-0.07108165,-0.042713746,-0.0019437539,-0.037021253,-0.01029683,-0.04763728,0.044768006,0.051705625,0.027870722,-0.029856335,0.044794533,0.041716583,0.005714735,-0.042237014,0.021369876,-0.036195222,-0.03026479,-0.062723026,-0.04044857,0.052762896,0.05741143,0.0024630066,0.024977027,-0.024401238,-0.026662227,0.010398462,-0.041547872,-0.011786582,0.0001928209,-0.05400798,-0.011056372,-0.0069007934,0.05233311,-0.051771216,-0.007986862,0.0058972025,0.0010173703,0.014101577,-0.02888259,-0.005247345,0.014969259,-0.017491411,0.022114078,0.054231796,0.0693408,0.024665335,0.0060341093,0.047584448,-0.022898836,-0.03860913,-0.008753723,0.066226095,-0.015601339,-0.015594186,0.008109827,0.02762355,-0.040960338,-0.07063869,-0.10760886,0.07103081,0.07949255,0.011041293,0.009953459,0.01282172,-0.11127405,0.06562236,0.017895646,-0.028551126,0.0034980017,-0.049412806,-0.0022131496,0.01694154,-0.018129358,0.0025160995,-0.030706432,-0.006324037,-0.011221701,-0.0138477655,0.008536133,-0.038423948,0.006269919,0.010420152,-0.015792616,-0.057147574,0.03655369,0.02438403,0.023860285,-0.02548661,-0.019739082,-0.026643759,-0.037419785,0.07105549,-0.09195632,0.009262095,0.016951106,0.013122508,-0.02678002,0.033977795,0.017673843,-0.011726016,-0.0028610046,-0.014962445,0.014031477,-0.066536784,0.047569513,-0.0061074435,-0.014959956,-0.018984262,0.018863233,0.010881963,0.021112224,-0.047439963,-0.010241952,0.018246666,-0.08177255,0.002201414,0.0028755402,0.07304986,-0.05865679,0.07727286,-0.017159544,-0.014336905,-0.039719775,0.04048986,0.01727792,-0.05241815,-0.0017769838,0.012215787,-0.02563316,0.0022411847,-0.026671018,0.012674026,-0.031635597,-0.030731393,-0.058119785,-0.02109657,-0.013060178,-0.008763418,-0.02693084,-0.029913342,-0.050483596,0.053532235,0.00023135131,-0.01079637,0.014650035,-0.0360408,0.032104,0.008677947,0.036806807,0.021368658,0.044709537,0.005034836,-0.012004314,0.030426877,0.035513613,0.007029677,0.015998648,0.0023082977,-0.012839479,-0.015300214,0.021747679,0.02441225,0.008591823,-0.026263,-0.016745303,0.02876343,0.02161042,-0.043705575,-0.07263763,0.040662255,-0.021637807,0.025721777,0.011189195,-0.06522892,-0.039178,-0.025462741,-0.015977532,0.08107547,-0.0023623738,0.07413406,-0.054473408,-0.025222775,0.0025412901,0.049714465,0.023495436,0.011353776,0.01915638,-0.07284088,-0.055901747,-0.011372277,-0.04531257,-0.0010114616,0.023736784,-0.02933723,-0.01806317,0.059624355,0.008427924,-0.008071932,-0.03686322,0.06427029,-0.0071763685,0.03722306,-0.07412364,0.059935663,-0.012945891,-0.004217257,0.04227799,0.0026032059,0.038249433,0.024262654,-0.06660785,-0.01767007,-0.048499577,-0.021550355,-0.04052534,-0.056368917,-0.035776604,0.014429127,-0.046295013,-0.01969362,-0.05241185,0.013367634,-0.025089506,-0.020365193,-0.096350685,-0.0006560667,-0.12663653,-0.021549067,-0.00042306623,0.056447037,-0.068010665,0.009372839,-0.023462826,-0.03718492,-0.011834557,-0.06215604,0.001740156,-0.026616726,0.02620875,-0.051694006,-0.060010314,0.088537246,0.02306388,0.021465834,-0.039860748,0.0049556773,-0.008276462,0.01571022,0.015252781,0.0043489817,0.0047473744,0.015375844,0.021064134,0.022673473,-0.020984912,0.041843683,-0.004998905,0.019290565,0.07313926,0.016170688,-0.0070825764,0.008085355,0.030969916,-0.052125793,-0.00119343,-0.020770743,0.005040262,-0.06438332,-0.03054685,-0.056038614,0.007292586,-0.009091768,0.016240655,-0.026041457,-0.0017094857,-0.012900767,0.0023592676,-0.15212233,-0.002787001,-0.022846928,-0.008298077,0.008942087,-0.005399847,-0.12795833,0.02194737,0.038426273,0.011210585,0.015937071,0.01652439,0.04638869,-0.0015596299,0.046057966,0.01284564,-0.04824248,-0.048770666,0.004823432,0.037608977,-0.035228018,0.01284303,0.02861613,0.04946267,0.0017318788,0.0064167017,0.017107239,0.07270941,-0.04047865,-0.020889271,0.06742234,0.0034361407,-0.006533595,-0.072778426,-0.021045314,0.051509142,0.012642494,-0.0065094493,-0.014930048,-0.016600294,-0.029789876,0.010746148,0.019562326,-0.048779935,-0.009655319,0.009704649,-0.017132474,0.014221928,-0.016862636,-0.015088784,0.036962435,0.03800897,-0.021369835,0.016590651,0.021461776,0.011265592,-0.017032169,-0.011579449,0.010473263,0.0038892624,-0.011653849,0.0067228796,0.036396068,-0.086987235,-0.043179054,-0.06045615,-0.027507344,0.01898071,0.0021537999,0.03863412,-0.082101256,-0.022490822,-0.030668069,0.019453317,-0.019497963,0.027444895,0.008324157,0.077800214,-0.008864904,0.00070404634,-0.0042102584,0.012291077,-0.0022139782,0.0063904747,-0.0224404,0.01270542,0.073626384,-0.0138973165,-0.01587587,0.007332904,0.053479884,0.0126192905,0.03846637,-0.02164322,0.009122238,-0.038587973,0.0033948924,-0.024301471,-0.07765203,-0.06887032,-0.0033560426,0.024103861,0.02175127,-0.005438736,-0.019028928,-0.011881801,0.04658765,-0.0032898688,-0.022994773,-0.057795227,0.0007874072,-0.014938558,-0.0020875153,0.03916637,-0.0005719714,0.03274804,-0.043256167,-0.08258283,0.002771683,0.03880907,0.007736612,-0.036179643,-0.023501521,-0.007094484,-0.04572199,-0.03783449,0.06667787,0.025028437,-0.027400147,0.04742008,0.03497593,-0.025737628,0.0143417325,-0.0801948,0.002148153,-0.056736637,0.018184366,-0.023764528,-0.03089787,0.045199327,0.038430642,0.012320955,-0.0034206016,0.008259982,-0.08188357,-0.025707781,0.037488095,0.0329267,0.02680568,-0.020017106,-0.101924196,-0.0002987486,0.0015940806,-0.027968334,0.043694776,-0.01639232,0.020198138,-0.006293954,-0.05369629,-0.0049940026,0.017192543,0.01815282,0.025139362,0.024615174,0.010691901,0.04171069,0.00783473,0.04162263,0.060151987,-0.049454674,-0.018907793,-0.017160542,0.038307097,0.014062204,0.044060737,0.040468957,0.024808343,-0.01295676,-0.027202437,-0.02584859,0.023683801,0.012192099,0.009978709,0.029519245,0.07515903,-0.006129348,0.008959958,-0.023825863,0.0044372277,-0.032986306,0.00857692,-0.03772037,0.029042693,0.04816213,0.030966364,0.007526938,0.041104514,0.009622172,0.00020240695,0.016564028,-0.09084545,0.024251586,-0.011796522,0.03270972,-0.05095556,-0.03087125,0.040177897,-0.0214418,-0.009920605,-0.032325275,0.0067079635,0.032557752,0.058644805,0.0009789491,-0.05463241,0.07271311,0.05638897,0.02779334,-0.016631356,0.056303587,0.0032622176,-0.009730591,0.03687565,0.013393435,0.019913793,-0.018202743,0.042659458,0.02042277,0.0037162772,-0.0058780485,0.055209737,0.0065039513,-0.033579744,0.110829175,0.0141719645,-0.034089915,-0.0295929,-0.01597201,-0.04079497,-0.017624974,0.034853317,-0.013143748,-0.030974815,-0.014491101,0.0014935875,-0.04783296,-0.003834253,-0.01592179,0.04016568,0.043084953,0.018620549,0.037980415,0.018863747,-0.023181852,0.036243442,0.026030993,0.022335352,0.0051883203,0.056543007,0.016809274,-0.024239685,-0.0049580056,0.034736272,-0.012344231,0.011084395,0.034185786,0.10083858,0.016316477,-0.02884211,0.032373015,0.025151242,-0.05570408,0.0044988585,0.024889369,-0.0070608463,0.025382163,0.00076508545,-0.053706087,0.044327743,-0.0004274806,-0.04149264,0.013768267,0.02353577,0.012244909,-0.019925276,-0.03994854,0.02115332,-0.021197634,-0.020001471,-0.0039447863,-0.019539582,-0.036312554,0.0630088,0.0064062285,-0.012752343,0.019691397,-0.0073700403,-0.057175416,-0.048575044,0.01835869,-0.052004393,-0.012829473,0.045221686,0.017293127,-0.002716665,0.035932302,-0.028882606,-0.02284021,-0.05321015,-0.025286494,-0.0013041688,0.0014946746,-0.062140975,0.006390432,-0.025756182,0.006700617,0.041574825,0.026627772,-0.055784,0.03572762,-0.05458134,0.006072789,0.00050017587,-0.026481716,0.004821089,0.07216091,0.06498475,0.04298358,-0.0652811,0.030057522,-0.0043386626,-0.035777867,-0.014183407,0.02575715,-0.031107243,0.06694994,-0.01350051,-0.0054596937,-0.020814085,-0.030529095,-0.048428882,0.0022020463,0.008411089,-0.0141189955,-0.02788358,-0.037742317,0.017499987,0.012193444,0.0056539797,0.0056793913,-0.033566047,0.029920595,0.023879478,-0.06469441,-0.033080183,-0.009824401,-0.007026588,0.006820907,0.0065646935,-0.060515195,0.04025525,-0.018602828,-0.025215873,0.023170162,-0.002425103,-0.04119311,0.021042354,-0.006268841,-0.008135002,0.0020527765,0.022903774,-0.025978768,0.01732635,-0.033356253,0.0062821107,-0.027275378,-0.024396066,0.040092353,-0.0031705408,0.08388799,-0.05506563,0.05298032,0.055600785,-0.01867074,-0.009045021,-0.0058385553,-0.058683474,-0.026658406,0.046543714,0.012680779,0.033616956,0.017684871,-0.017695645,-0.027292117,-0.07399303,0.03792949,0.09185716,0.012544369,0.019727051,0.021320926,0.048390236,-0.0018180797,0.048683695,0.07041955,-0.015210325,-0.05298181,0.008707267,0.07186297,0.08904816,0.011354135,-0.03252077,0.0085485075,-0.010139371,0.030370055,0.054077215,0.015829083,-0.0062351567,0.008499719,0.018361144,0.0045406404,0.058121633,-0.037915245,0.033083387,0.011294491,0.013408599,0.03628847,0.029363828,-0.02590689,0.0032851235,0.043299507,-0.0019373059,-0.04757219,-0.018911147,-0.034399275,-0.039244488,0.037916843,0.03421782,-0.025551336,0.034594245,-0.03266633,0.053599562,-0.014870805,0.013839683,0.005927685,-0.0154248765,0.05978635,-0.03531349,0.021701278,-0.05501132,-0.007877882,0.023955911,-0.009043683]}]}","genkit:state":"success"},"displayName":"googleai/text-embedding-004","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"e89ea6106c1a9b0a":{"spanId":"e89ea6106c1a9b0a","traceId":"7026833274d510bcd379c7af575b31e1","parentSpanId":"e126f23001a796cc","startTime":1756741358125,"endTime":1756741370876.5813,"attributes":{"http.request.method":"POST","http.request.method_original":"POST","url.full":"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent","url.path":"/v1beta/models/gemini-1.5-pro:generateContent","url.query":"","url.scheme":"https","server.address":"generativelanguage.googleapis.com","server.port":443,"user_agent.original":"node","network.peer.address":"142.251.31.95","network.peer.port":443,"http.response.status_code":200},"displayName":"POST","links":[],"instrumentationLibrary":{"name":"@opentelemetry/instrumentation-undici","version":"0.5.0"},"spanKind":"CLIENT","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"e126f23001a796cc":{"spanId":"e126f23001a796cc","traceId":"7026833274d510bcd379c7af575b31e1","parentSpanId":"7fbc76d886b570a7","startTime":1756741358121,"endTime":1756741370885.6394,"attributes":{"genkit:type":"action","genkit:metadata:subtype":"model","genkit:name":"googleai/gemini-1.5-pro","genkit:path":"/{generateMasterPrompt,t:flow}/{generate,t:util}/{googleai/gemini-1.5-pro,t:action,s:model}","genkit:input":"{\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"\\n      You are a world-class Master Prompt Engineer, an expert in orchestrating AI agents by creating precise, high-quality instructions.\\n      Your task is to generate a new, complete \\\"Master Prompt\\\" for an AI software engineering agent.\\n      This new prompt must be based on the provided task description and the relevant principles retrieved from the project's knowledge base.\\n\\n      The Master Prompt you generate MUST strictly follow this five-part anatomy:\\n      1.  **Role-Playing:** Assign a specific, expert persona to the AI agent.\\n      2.  **Context Grounding:** Explicitly instruct the agent to ground its response in the project's constitution (CONTEXT.md).\\n      3.  **Task Definition:** Clearly and unambiguously state the primary goal.\\n      4.  **Constraints & Directives:** List all critical non-functional requirements (e.g., security, performance, standards).\\n      5.  **Output Formatting:** Specify the exact structure and format of the desired output.\\n\\n      ---\\n      RELEVANT PRINCIPLES & CONTEXT FROM KNOWLEDGE BASE:\\n      ## **3. Coding Standards & Idioms**\\n\\n*   **Language:** TypeScript. `strict` mode in `tsconfig.json` is enabled and must be adhered to.\\n*   **Naming Conventions:**\\n    *   `camelCase` for variables and functions.\\n    *   `PascalCase` for React components, types, and interfaces.\\n*   **Error Handling:** All asynchronous operations, API calls, and database interactions **MUST** be wrapped in `try...catch` blocks to handle errors gracefully and prevent crashes.\\n*   **Comments:** Comment the \\\"why,\\\" not the \\\"what.\\\" Explain the purpose and intent behind complex logic, especially in relation to a regenerative principle.\\n\\n---\\n\\n\\n---\\n## **2. Architectural Patterns**\\n\\n\\n---\\n## **1. Project-Level Context**\\n\\n\\n---\\n## **6. AI Agent Interaction Protocols (Meta-Rules)**\\n\\n*   **Principle of Assumed Context:** In every prompt, you must operate as if this entire document has been provided as your foundational context. Your primary directive is to adhere to these rules above all else.\\n*   **Principle of Justification:** For significant architectural choices (e.g., selecting a data modeling strategy), you must explicitly justify your decision by referencing the relevant section and principle from this document.\\n*   **The Generator-Critique Mandate:** All generated code is considered a \\\"draft\\\" until it has been audited. A second AI agent, acting as a \\\"Critique Agent,\\\" will review the draft against this constitution. Code is only considered \\\"complete\\\" after it has passed this audit.\\n---\\n### **Preamble**\\n\\nThis document is the master context and single source of truth for the AI agent developing the Regenerative Development Intelligence (RDI) Platform. It is the ultimate authority on all matters of architecture, coding standards, security, and design. All generated code and system artifacts must strictly adhere to the principles and mandates defined herein. This is a living document, version-controlled alongside the source code, and serves as the long-term memory and evolving intelligence of the project.\\n\\n---\\n\\n\\n---\\n### **1.4. Regenerative Principles as Technical Directives**\\n\\nHigh-level principles are translated into concrete, non-negotiable technical rules here.\\n\\n*   **Directive: Enforce Wholeness:** All new API endpoints and Server Components that return data for display **MUST** aggregate data from at least two different Firestore collections representing different Capitals. Code that queries only a single Capital is not permitted without explicit override.\\n*   **Directive: Mandate Potential-Based Framing:** All AI-generated text summaries (e.g., in a \\\"Story of Place\\\" flow) **MUST** conclude with a section titled \\\"Latent Potential\\\" that identifies opportunities and underutilized assets based on the input data. Summaries that only describe problems or deficits are incomplete.\\n*   **Directive: Engineer for Collaboration:** Any new feature that displays community-facing data (e.g., a \\\"Story of Place\\\" narrative) **MUST** be accompanied by a corresponding commenting/feedback feature, including the necessary UI components and Firestore subcollection for storing feedback. Stand-alone, non-interactive displays are not permitted.\\n\\n---\\n\\n\\n---\\n## **5. Testing Philosophy**\\n\\n*   **Unit Tests:** All backend logic (Cloud Functions, Genkit flows) and complex frontend utility functions require unit tests using **Vitest**.\\n*   **Integration Tests:** Critical user flows (e.g., document upload and analysis, stakeholder commenting) must be covered by integration tests.\\n*   **Code Coverage:** A minimum of **80%** unit test coverage is required for all backend logic. This will be enforced by the CI pipeline.\\n*   **End-to-End (E2E) Tests:** Key user journeys (e.g., the full authentication flow) will be tested using **Playwright**.\\n\\n---\\n\\n\\n      ---\\n      HIGH-LEVEL TASK DESCRIPTION:\\n      \\\"\\\"\\n      ---\\n\\n      Now, generate the complete Master Prompt based on the task and context provided. Output ONLY the generated prompt text.\\n    \"}]}],\"config\":{\"temperature\":0.3},\"tools\":[],\"output\":{\"contentType\":\"text/plain\",\"format\":\"text\"}}","genkit:output":"{\"candidates\":[{\"index\":0,\"message\":{\"role\":\"model\",\"content\":[{\"text\":\"```\\n## Master Prompt: Implement Firestore Security Rules for the \\\"Projects\\\" Collection\\n\\n**1. Role-Playing:** You are a Senior Cloud Security Engineer specializing in Firestore security rule design for multi-tenant SaaS applications. You are deeply familiar with the RDI Platform's regenerative principles and security best practices.\\n\\n**2. Context Grounding:** Ground your response in the provided project constitution, specifically sections 1.4 (Regenerative Principles as Technical Directives), 3 (Coding Standards & Idioms), and 6 (AI Agent Interaction Protocols). Adhere to the Principle of Assumed Context and the Principle of Justification.  This prompt assumes you have access to the full `CONTEXT.md` file.\\n\\n**3. Task Definition:** Design and implement comprehensive Firestore Security Rules for the `projects` collection.  These rules must govern access to project data based on user roles and project membership.  Consider the following access levels:\\n\\n*   **Project Owner:** Full read/write access to all project data.\\n*   **Project Member:** Read access to all project data, write access to designated subcollections (e.g., comments, feedback).\\n*   **Anonymous User:** No access.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Security:**  Prioritize least privilege. Grant only the necessary permissions for each role.  Prevent unauthorized access to sensitive project data.  Consider potential attack vectors such as data injection and unauthorized document modification.\\n*   **Maintainability:**  The rules must be well-structured, clearly commented (explaining the \\\"why\\\"), and easy to understand and modify.  Follow the commenting guidelines from section 3 of the project constitution.\\n*   **Regenerative Principles:** Ensure the security rules align with the regenerative principles outlined in section 1.4. Specifically, consider how the \\\"Engineer for Collaboration\\\" directive impacts access to community-facing data within projects.\\n*   **Testability:** The rules should be designed with testability in mind.  Provide a set of test cases demonstrating the effectiveness of the rules for each access level.\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Firestore Security Rules for the 'projects' collection\\n\\nrules_version = '2';\\nservice cloud.firestore {\\n  match /databases/{database}/documents {\\n\\n    // Project Document Rules\\n    match /projects/{projectId} {\\n      // ... your rules here ...\\n    }\\n\\n    // Subcollection Rules (e.g., comments, feedback)\\n    match /projects/{projectId}/comments/{commentId} {\\n      // ... your rules here ...\\n    }\\n\\n    // ... other subcollection rules as needed ...\\n\\n  }\\n}\\n\\n// Test Cases (using the Firestore emulator rules testing API)\\n// Example:\\n// describe(\\\"Project Security Rules\\\", () => {\\n//   it(\\\"should allow project owner full access\\\", async () => { /* ... test logic ... */ });\\n//   // ... more test cases ...\\n// });\\n\\n```\\n  The output should consist of valid Firestore Security Rules written in TypeScript syntax.  Include comprehensive comments explaining the rationale behind each rule.  Following the rules, provide a set of test cases (commented out) demonstrating the effectiveness of the rules, ready to be implemented using the Firestore emulator rules testing API.  Ensure the output adheres to the formatting and style guidelines specified in section 3 of the project constitution.\\n```\\n\"}]},\"finishReason\":\"stop\",\"custom\":{}}],\"custom\":{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"```\\n## Master Prompt: Implement Firestore Security Rules for the \\\"Projects\\\" Collection\\n\\n**1. Role-Playing:** You are a Senior Cloud Security Engineer specializing in Firestore security rule design for multi-tenant SaaS applications. You are deeply familiar with the RDI Platform's regenerative principles and security best practices.\\n\\n**2. Context Grounding:** Ground your response in the provided project constitution, specifically sections 1.4 (Regenerative Principles as Technical Directives), 3 (Coding Standards & Idioms), and 6 (AI Agent Interaction Protocols). Adhere to the Principle of Assumed Context and the Principle of Justification.  This prompt assumes you have access to the full `CONTEXT.md` file.\\n\\n**3. Task Definition:** Design and implement comprehensive Firestore Security Rules for the `projects` collection.  These rules must govern access to project data based on user roles and project membership.  Consider the following access levels:\\n\\n*   **Project Owner:** Full read/write access to all project data.\\n*   **Project Member:** Read access to all project data, write access to designated subcollections (e.g., comments, feedback).\\n*   **Anonymous User:** No access.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Security:**  Prioritize least privilege. Grant only the necessary permissions for each role.  Prevent unauthorized access to sensitive project data.  Consider potential attack vectors such as data injection and unauthorized document modification.\\n*   **Maintainability:**  The rules must be well-structured, clearly commented (explaining the \\\"why\\\"), and easy to understand and modify.  Follow the commenting guidelines from section 3 of the project constitution.\\n*   **Regenerative Principles:** Ensure the security rules align with the regenerative principles outlined in section 1.4. Specifically, consider how the \\\"Engineer for Collaboration\\\" directive impacts access to community-facing data within projects.\\n*   **Testability:** The rules should be designed with testability in mind.  Provide a set of test cases demonstrating the effectiveness of the rules for each access level.\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Firestore Security Rules for the 'projects' collection\\n\\nrules_version = '2';\\nservice cloud.firestore {\\n  match /databases/{database}/documents {\\n\\n    // Project Document Rules\\n    match /projects/{projectId} {\\n      // ... your rules here ...\\n    }\\n\\n    // Subcollection Rules (e.g., comments, feedback)\\n    match /projects/{projectId}/comments/{commentId} {\\n      // ... your rules here ...\\n    }\\n\\n    // ... other subcollection rules as needed ...\\n\\n  }\\n}\\n\\n// Test Cases (using the Firestore emulator rules testing API)\\n// Example:\\n// describe(\\\"Project Security Rules\\\", () => {\\n//   it(\\\"should allow project owner full access\\\", async () => { /* ... test logic ... */ });\\n//   // ... more test cases ...\\n// });\\n\\n```\\n  The output should consist of valid Firestore Security Rules written in TypeScript syntax.  Include comprehensive comments explaining the rationale behind each rule.  Following the rules, provide a set of test cases (commented out) demonstrating the effectiveness of the rules, ready to be implemented using the Firestore emulator rules testing API.  Ensure the output adheres to the formatting and style guidelines specified in section 3 of the project constitution.\\n```\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"avgLogprobs\":-0.1286835125706596}],\"usageMetadata\":{\"promptTokenCount\":1071,\"candidatesTokenCount\":709,\"totalTokenCount\":1780,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1071}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":709}]},\"modelVersion\":\"gemini-1.5-pro-002\",\"responseId\":\"7r61aNPjCdSCvdIPkpSZ4Qg\"},\"usage\":{\"inputCharacters\":5003,\"inputImages\":0,\"inputVideos\":0,\"inputAudioFiles\":0,\"outputCharacters\":3353,\"outputImages\":0,\"outputVideos\":0,\"outputAudioFiles\":0,\"inputTokens\":1071,\"outputTokens\":709,\"totalTokens\":1780},\"latencyMs\":12763.696951000002}","genkit:state":"success"},"displayName":"googleai/gemini-1.5-pro","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"7fbc76d886b570a7":{"spanId":"7fbc76d886b570a7","traceId":"7026833274d510bcd379c7af575b31e1","parentSpanId":"b3b1bfa25acfe13a","startTime":1756741357886,"endTime":1756741371174.4458,"attributes":{"genkit:type":"util","genkit:name":"generate","genkit:path":"/{generateMasterPrompt,t:flow}/{generate,t:util}","genkit:input":"{\"model\":\"googleai/gemini-1.5-pro\",\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"\\n      You are a world-class Master Prompt Engineer, an expert in orchestrating AI agents by creating precise, high-quality instructions.\\n      Your task is to generate a new, complete \\\"Master Prompt\\\" for an AI software engineering agent.\\n      This new prompt must be based on the provided task description and the relevant principles retrieved from the project's knowledge base.\\n\\n      The Master Prompt you generate MUST strictly follow this five-part anatomy:\\n      1.  **Role-Playing:** Assign a specific, expert persona to the AI agent.\\n      2.  **Context Grounding:** Explicitly instruct the agent to ground its response in the project's constitution (CONTEXT.md).\\n      3.  **Task Definition:** Clearly and unambiguously state the primary goal.\\n      4.  **Constraints & Directives:** List all critical non-functional requirements (e.g., security, performance, standards).\\n      5.  **Output Formatting:** Specify the exact structure and format of the desired output.\\n\\n      ---\\n      RELEVANT PRINCIPLES & CONTEXT FROM KNOWLEDGE BASE:\\n      ## **3. Coding Standards & Idioms**\\n\\n*   **Language:** TypeScript. `strict` mode in `tsconfig.json` is enabled and must be adhered to.\\n*   **Naming Conventions:**\\n    *   `camelCase` for variables and functions.\\n    *   `PascalCase` for React components, types, and interfaces.\\n*   **Error Handling:** All asynchronous operations, API calls, and database interactions **MUST** be wrapped in `try...catch` blocks to handle errors gracefully and prevent crashes.\\n*   **Comments:** Comment the \\\"why,\\\" not the \\\"what.\\\" Explain the purpose and intent behind complex logic, especially in relation to a regenerative principle.\\n\\n---\\n\\n\\n---\\n## **2. Architectural Patterns**\\n\\n\\n---\\n## **1. Project-Level Context**\\n\\n\\n---\\n## **6. AI Agent Interaction Protocols (Meta-Rules)**\\n\\n*   **Principle of Assumed Context:** In every prompt, you must operate as if this entire document has been provided as your foundational context. Your primary directive is to adhere to these rules above all else.\\n*   **Principle of Justification:** For significant architectural choices (e.g., selecting a data modeling strategy), you must explicitly justify your decision by referencing the relevant section and principle from this document.\\n*   **The Generator-Critique Mandate:** All generated code is considered a \\\"draft\\\" until it has been audited. A second AI agent, acting as a \\\"Critique Agent,\\\" will review the draft against this constitution. Code is only considered \\\"complete\\\" after it has passed this audit.\\n---\\n### **Preamble**\\n\\nThis document is the master context and single source of truth for the AI agent developing the Regenerative Development Intelligence (RDI) Platform. It is the ultimate authority on all matters of architecture, coding standards, security, and design. All generated code and system artifacts must strictly adhere to the principles and mandates defined herein. This is a living document, version-controlled alongside the source code, and serves as the long-term memory and evolving intelligence of the project.\\n\\n---\\n\\n\\n---\\n### **1.4. Regenerative Principles as Technical Directives**\\n\\nHigh-level principles are translated into concrete, non-negotiable technical rules here.\\n\\n*   **Directive: Enforce Wholeness:** All new API endpoints and Server Components that return data for display **MUST** aggregate data from at least two different Firestore collections representing different Capitals. Code that queries only a single Capital is not permitted without explicit override.\\n*   **Directive: Mandate Potential-Based Framing:** All AI-generated text summaries (e.g., in a \\\"Story of Place\\\" flow) **MUST** conclude with a section titled \\\"Latent Potential\\\" that identifies opportunities and underutilized assets based on the input data. Summaries that only describe problems or deficits are incomplete.\\n*   **Directive: Engineer for Collaboration:** Any new feature that displays community-facing data (e.g., a \\\"Story of Place\\\" narrative) **MUST** be accompanied by a corresponding commenting/feedback feature, including the necessary UI components and Firestore subcollection for storing feedback. Stand-alone, non-interactive displays are not permitted.\\n\\n---\\n\\n\\n---\\n## **5. Testing Philosophy**\\n\\n*   **Unit Tests:** All backend logic (Cloud Functions, Genkit flows) and complex frontend utility functions require unit tests using **Vitest**.\\n*   **Integration Tests:** Critical user flows (e.g., document upload and analysis, stakeholder commenting) must be covered by integration tests.\\n*   **Code Coverage:** A minimum of **80%** unit test coverage is required for all backend logic. This will be enforced by the CI pipeline.\\n*   **End-to-End (E2E) Tests:** Key user journeys (e.g., the full authentication flow) will be tested using **Playwright**.\\n\\n---\\n\\n\\n      ---\\n      HIGH-LEVEL TASK DESCRIPTION:\\n      \\\"\\\"\\n      ---\\n\\n      Now, generate the complete Master Prompt based on the task and context provided. Output ONLY the generated prompt text.\\n    \"}]}],\"config\":{\"temperature\":0.3},\"output\":{\"format\":\"text\",\"jsonSchema\":null}}","genkit:output":"{\"message\":{\"role\":\"model\",\"content\":[{\"text\":\"```\\n## Master Prompt: Implement Firestore Security Rules for the \\\"Projects\\\" Collection\\n\\n**1. Role-Playing:** You are a Senior Cloud Security Engineer specializing in Firestore security rule design for multi-tenant SaaS applications. You are deeply familiar with the RDI Platform's regenerative principles and security best practices.\\n\\n**2. Context Grounding:** Ground your response in the provided project constitution, specifically sections 1.4 (Regenerative Principles as Technical Directives), 3 (Coding Standards & Idioms), and 6 (AI Agent Interaction Protocols). Adhere to the Principle of Assumed Context and the Principle of Justification.  This prompt assumes you have access to the full `CONTEXT.md` file.\\n\\n**3. Task Definition:** Design and implement comprehensive Firestore Security Rules for the `projects` collection.  These rules must govern access to project data based on user roles and project membership.  Consider the following access levels:\\n\\n*   **Project Owner:** Full read/write access to all project data.\\n*   **Project Member:** Read access to all project data, write access to designated subcollections (e.g., comments, feedback).\\n*   **Anonymous User:** No access.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Security:**  Prioritize least privilege. Grant only the necessary permissions for each role.  Prevent unauthorized access to sensitive project data.  Consider potential attack vectors such as data injection and unauthorized document modification.\\n*   **Maintainability:**  The rules must be well-structured, clearly commented (explaining the \\\"why\\\"), and easy to understand and modify.  Follow the commenting guidelines from section 3 of the project constitution.\\n*   **Regenerative Principles:** Ensure the security rules align with the regenerative principles outlined in section 1.4. Specifically, consider how the \\\"Engineer for Collaboration\\\" directive impacts access to community-facing data within projects.\\n*   **Testability:** The rules should be designed with testability in mind.  Provide a set of test cases demonstrating the effectiveness of the rules for each access level.\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Firestore Security Rules for the 'projects' collection\\n\\nrules_version = '2';\\nservice cloud.firestore {\\n  match /databases/{database}/documents {\\n\\n    // Project Document Rules\\n    match /projects/{projectId} {\\n      // ... your rules here ...\\n    }\\n\\n    // Subcollection Rules (e.g., comments, feedback)\\n    match /projects/{projectId}/comments/{commentId} {\\n      // ... your rules here ...\\n    }\\n\\n    // ... other subcollection rules as needed ...\\n\\n  }\\n}\\n\\n// Test Cases (using the Firestore emulator rules testing API)\\n// Example:\\n// describe(\\\"Project Security Rules\\\", () => {\\n//   it(\\\"should allow project owner full access\\\", async () => { /* ... test logic ... */ });\\n//   // ... more test cases ...\\n// });\\n\\n```\\n  The output should consist of valid Firestore Security Rules written in TypeScript syntax.  Include comprehensive comments explaining the rationale behind each rule.  Following the rules, provide a set of test cases (commented out) demonstrating the effectiveness of the rules, ready to be implemented using the Firestore emulator rules testing API.  Ensure the output adheres to the formatting and style guidelines specified in section 3 of the project constitution.\\n```\\n\"}]},\"finishReason\":\"stop\",\"usage\":{\"inputCharacters\":5003,\"inputImages\":0,\"inputVideos\":0,\"inputAudioFiles\":0,\"outputCharacters\":3353,\"outputImages\":0,\"outputVideos\":0,\"outputAudioFiles\":0,\"inputTokens\":1071,\"outputTokens\":709,\"totalTokens\":1780},\"custom\":{\"candidates\":[{\"content\":{\"parts\":[{\"text\":\"```\\n## Master Prompt: Implement Firestore Security Rules for the \\\"Projects\\\" Collection\\n\\n**1. Role-Playing:** You are a Senior Cloud Security Engineer specializing in Firestore security rule design for multi-tenant SaaS applications. You are deeply familiar with the RDI Platform's regenerative principles and security best practices.\\n\\n**2. Context Grounding:** Ground your response in the provided project constitution, specifically sections 1.4 (Regenerative Principles as Technical Directives), 3 (Coding Standards & Idioms), and 6 (AI Agent Interaction Protocols). Adhere to the Principle of Assumed Context and the Principle of Justification.  This prompt assumes you have access to the full `CONTEXT.md` file.\\n\\n**3. Task Definition:** Design and implement comprehensive Firestore Security Rules for the `projects` collection.  These rules must govern access to project data based on user roles and project membership.  Consider the following access levels:\\n\\n*   **Project Owner:** Full read/write access to all project data.\\n*   **Project Member:** Read access to all project data, write access to designated subcollections (e.g., comments, feedback).\\n*   **Anonymous User:** No access.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Security:**  Prioritize least privilege. Grant only the necessary permissions for each role.  Prevent unauthorized access to sensitive project data.  Consider potential attack vectors such as data injection and unauthorized document modification.\\n*   **Maintainability:**  The rules must be well-structured, clearly commented (explaining the \\\"why\\\"), and easy to understand and modify.  Follow the commenting guidelines from section 3 of the project constitution.\\n*   **Regenerative Principles:** Ensure the security rules align with the regenerative principles outlined in section 1.4. Specifically, consider how the \\\"Engineer for Collaboration\\\" directive impacts access to community-facing data within projects.\\n*   **Testability:** The rules should be designed with testability in mind.  Provide a set of test cases demonstrating the effectiveness of the rules for each access level.\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Firestore Security Rules for the 'projects' collection\\n\\nrules_version = '2';\\nservice cloud.firestore {\\n  match /databases/{database}/documents {\\n\\n    // Project Document Rules\\n    match /projects/{projectId} {\\n      // ... your rules here ...\\n    }\\n\\n    // Subcollection Rules (e.g., comments, feedback)\\n    match /projects/{projectId}/comments/{commentId} {\\n      // ... your rules here ...\\n    }\\n\\n    // ... other subcollection rules as needed ...\\n\\n  }\\n}\\n\\n// Test Cases (using the Firestore emulator rules testing API)\\n// Example:\\n// describe(\\\"Project Security Rules\\\", () => {\\n//   it(\\\"should allow project owner full access\\\", async () => { /* ... test logic ... */ });\\n//   // ... more test cases ...\\n// });\\n\\n```\\n  The output should consist of valid Firestore Security Rules written in TypeScript syntax.  Include comprehensive comments explaining the rationale behind each rule.  Following the rules, provide a set of test cases (commented out) demonstrating the effectiveness of the rules, ready to be implemented using the Firestore emulator rules testing API.  Ensure the output adheres to the formatting and style guidelines specified in section 3 of the project constitution.\\n```\\n\"}],\"role\":\"model\"},\"finishReason\":\"STOP\",\"avgLogprobs\":-0.1286835125706596}],\"usageMetadata\":{\"promptTokenCount\":1071,\"candidatesTokenCount\":709,\"totalTokenCount\":1780,\"promptTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":1071}],\"candidatesTokensDetails\":[{\"modality\":\"TEXT\",\"tokenCount\":709}]},\"modelVersion\":\"gemini-1.5-pro-002\",\"responseId\":\"7r61aNPjCdSCvdIPkpSZ4Qg\"},\"request\":{\"messages\":[{\"role\":\"user\",\"content\":[{\"text\":\"\\n      You are a world-class Master Prompt Engineer, an expert in orchestrating AI agents by creating precise, high-quality instructions.\\n      Your task is to generate a new, complete \\\"Master Prompt\\\" for an AI software engineering agent.\\n      This new prompt must be based on the provided task description and the relevant principles retrieved from the project's knowledge base.\\n\\n      The Master Prompt you generate MUST strictly follow this five-part anatomy:\\n      1.  **Role-Playing:** Assign a specific, expert persona to the AI agent.\\n      2.  **Context Grounding:** Explicitly instruct the agent to ground its response in the project's constitution (CONTEXT.md).\\n      3.  **Task Definition:** Clearly and unambiguously state the primary goal.\\n      4.  **Constraints & Directives:** List all critical non-functional requirements (e.g., security, performance, standards).\\n      5.  **Output Formatting:** Specify the exact structure and format of the desired output.\\n\\n      ---\\n      RELEVANT PRINCIPLES & CONTEXT FROM KNOWLEDGE BASE:\\n      ## **3. Coding Standards & Idioms**\\n\\n*   **Language:** TypeScript. `strict` mode in `tsconfig.json` is enabled and must be adhered to.\\n*   **Naming Conventions:**\\n    *   `camelCase` for variables and functions.\\n    *   `PascalCase` for React components, types, and interfaces.\\n*   **Error Handling:** All asynchronous operations, API calls, and database interactions **MUST** be wrapped in `try...catch` blocks to handle errors gracefully and prevent crashes.\\n*   **Comments:** Comment the \\\"why,\\\" not the \\\"what.\\\" Explain the purpose and intent behind complex logic, especially in relation to a regenerative principle.\\n\\n---\\n\\n\\n---\\n## **2. Architectural Patterns**\\n\\n\\n---\\n## **1. Project-Level Context**\\n\\n\\n---\\n## **6. AI Agent Interaction Protocols (Meta-Rules)**\\n\\n*   **Principle of Assumed Context:** In every prompt, you must operate as if this entire document has been provided as your foundational context. Your primary directive is to adhere to these rules above all else.\\n*   **Principle of Justification:** For significant architectural choices (e.g., selecting a data modeling strategy), you must explicitly justify your decision by referencing the relevant section and principle from this document.\\n*   **The Generator-Critique Mandate:** All generated code is considered a \\\"draft\\\" until it has been audited. A second AI agent, acting as a \\\"Critique Agent,\\\" will review the draft against this constitution. Code is only considered \\\"complete\\\" after it has passed this audit.\\n---\\n### **Preamble**\\n\\nThis document is the master context and single source of truth for the AI agent developing the Regenerative Development Intelligence (RDI) Platform. It is the ultimate authority on all matters of architecture, coding standards, security, and design. All generated code and system artifacts must strictly adhere to the principles and mandates defined herein. This is a living document, version-controlled alongside the source code, and serves as the long-term memory and evolving intelligence of the project.\\n\\n---\\n\\n\\n---\\n### **1.4. Regenerative Principles as Technical Directives**\\n\\nHigh-level principles are translated into concrete, non-negotiable technical rules here.\\n\\n*   **Directive: Enforce Wholeness:** All new API endpoints and Server Components that return data for display **MUST** aggregate data from at least two different Firestore collections representing different Capitals. Code that queries only a single Capital is not permitted without explicit override.\\n*   **Directive: Mandate Potential-Based Framing:** All AI-generated text summaries (e.g., in a \\\"Story of Place\\\" flow) **MUST** conclude with a section titled \\\"Latent Potential\\\" that identifies opportunities and underutilized assets based on the input data. Summaries that only describe problems or deficits are incomplete.\\n*   **Directive: Engineer for Collaboration:** Any new feature that displays community-facing data (e.g., a \\\"Story of Place\\\" narrative) **MUST** be accompanied by a corresponding commenting/feedback feature, including the necessary UI components and Firestore subcollection for storing feedback. Stand-alone, non-interactive displays are not permitted.\\n\\n---\\n\\n\\n---\\n## **5. Testing Philosophy**\\n\\n*   **Unit Tests:** All backend logic (Cloud Functions, Genkit flows) and complex frontend utility functions require unit tests using **Vitest**.\\n*   **Integration Tests:** Critical user flows (e.g., document upload and analysis, stakeholder commenting) must be covered by integration tests.\\n*   **Code Coverage:** A minimum of **80%** unit test coverage is required for all backend logic. This will be enforced by the CI pipeline.\\n*   **End-to-End (E2E) Tests:** Key user journeys (e.g., the full authentication flow) will be tested using **Playwright**.\\n\\n---\\n\\n\\n      ---\\n      HIGH-LEVEL TASK DESCRIPTION:\\n      \\\"\\\"\\n      ---\\n\\n      Now, generate the complete Master Prompt based on the task and context provided. Output ONLY the generated prompt text.\\n    \"}]}],\"config\":{\"temperature\":0.3},\"tools\":[],\"output\":{\"contentType\":\"text/plain\",\"format\":\"text\"}}}","genkit:state":"success"},"displayName":"generate","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}},"b3b1bfa25acfe13a":{"spanId":"b3b1bfa25acfe13a","traceId":"7026833274d510bcd379c7af575b31e1","startTime":1756741357510,"endTime":1756741371178.558,"attributes":{"genkit:type":"action","genkit:metadata:subtype":"flow","genkit:name":"generateMasterPrompt","genkit:isRoot":true,"genkit:path":"/{generateMasterPrompt,t:flow}","genkit:metadata:context":"{}","genkit:input":"\"\"","genkit:output":"\"```\\n## Master Prompt: Implement Firestore Security Rules for the \\\"Projects\\\" Collection\\n\\n**1. Role-Playing:** You are a Senior Cloud Security Engineer specializing in Firestore security rule design for multi-tenant SaaS applications. You are deeply familiar with the RDI Platform's regenerative principles and security best practices.\\n\\n**2. Context Grounding:** Ground your response in the provided project constitution, specifically sections 1.4 (Regenerative Principles as Technical Directives), 3 (Coding Standards & Idioms), and 6 (AI Agent Interaction Protocols). Adhere to the Principle of Assumed Context and the Principle of Justification.  This prompt assumes you have access to the full `CONTEXT.md` file.\\n\\n**3. Task Definition:** Design and implement comprehensive Firestore Security Rules for the `projects` collection.  These rules must govern access to project data based on user roles and project membership.  Consider the following access levels:\\n\\n*   **Project Owner:** Full read/write access to all project data.\\n*   **Project Member:** Read access to all project data, write access to designated subcollections (e.g., comments, feedback).\\n*   **Anonymous User:** No access.\\n\\n**4. Constraints & Directives:**\\n\\n*   **Security:**  Prioritize least privilege. Grant only the necessary permissions for each role.  Prevent unauthorized access to sensitive project data.  Consider potential attack vectors such as data injection and unauthorized document modification.\\n*   **Maintainability:**  The rules must be well-structured, clearly commented (explaining the \\\"why\\\"), and easy to understand and modify.  Follow the commenting guidelines from section 3 of the project constitution.\\n*   **Regenerative Principles:** Ensure the security rules align with the regenerative principles outlined in section 1.4. Specifically, consider how the \\\"Engineer for Collaboration\\\" directive impacts access to community-facing data within projects.\\n*   **Testability:** The rules should be designed with testability in mind.  Provide a set of test cases demonstrating the effectiveness of the rules for each access level.\\n\\n**5. Output Formatting:**\\n\\n```typescript\\n// Firestore Security Rules for the 'projects' collection\\n\\nrules_version = '2';\\nservice cloud.firestore {\\n  match /databases/{database}/documents {\\n\\n    // Project Document Rules\\n    match /projects/{projectId} {\\n      // ... your rules here ...\\n    }\\n\\n    // Subcollection Rules (e.g., comments, feedback)\\n    match /projects/{projectId}/comments/{commentId} {\\n      // ... your rules here ...\\n    }\\n\\n    // ... other subcollection rules as needed ...\\n\\n  }\\n}\\n\\n// Test Cases (using the Firestore emulator rules testing API)\\n// Example:\\n// describe(\\\"Project Security Rules\\\", () => {\\n//   it(\\\"should allow project owner full access\\\", async () => { /* ... test logic ... */ });\\n//   // ... more test cases ...\\n// });\\n\\n```\\n  The output should consist of valid Firestore Security Rules written in TypeScript syntax.  Include comprehensive comments explaining the rationale behind each rule.  Following the rules, provide a set of test cases (commented out) demonstrating the effectiveness of the rules, ready to be implemented using the Firestore emulator rules testing API.  Ensure the output adheres to the formatting and style guidelines specified in section 3 of the project constitution.\\n```\\n\"","genkit:state":"success"},"displayName":"generateMasterPrompt","links":[],"instrumentationLibrary":{"name":"genkit-tracer","version":"v1"},"spanKind":"INTERNAL","sameProcessAsParentSpan":{"value":true},"status":{"code":0},"timeEvents":{"timeEvent":[]}}},"displayName":"generateMasterPrompt","startTime":1756741357510,"endTime":1756741371178.558}
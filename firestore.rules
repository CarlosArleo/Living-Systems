rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny: No access to any document unless explicitly allowed.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can only manage their own profile, and only change their displayName.
    match /users/{userId} {
      allow read, create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName']);
    }

    // Places Collection:
    // - Authenticated users can read all places.
    // - Authenticated users can create a place via the secure API route.
    match /places/{placeId} {
      allow read: if request.auth != null;
      // Allow creation only if the createdBy field matches the user's UID.
      // This rule is validated by the /api/places route.
      allow create: if request.auth.uid == request.resource.data.createdBy;
      // For now, prevent client-side updates to places.
      allow update, delete: if false;
    }

    // System Health Collection:
    // Only backend services can write health issues. No client access.
    match /system_health/{issueId} {
      allow read, write: if false; // Or allow read for admins if needed
    }
    
    // Documents can be read, but all writes are forced through the backend.
    match /places/{placeId}/documents/{docId} {
      allow read: if request.auth != null;
      allow write: if false; // CRITICAL: Enforces Forced Backend Logic
    }
    
    // Feedback can be read by anyone, but only created by the correct user.
    match /places/{placeId}/feedback/{feedbackId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.authorId;
    }
  }
}
